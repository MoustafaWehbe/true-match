/* tslint:disable */
/* eslint-disable */
/**
 * Dapp Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  StringApiResponse,
} from '../models/index';
import {
    StringApiResponseFromJSON,
    StringApiResponseToJSON,
} from '../models/index';

export interface ApiMediaPostRequest {
    contentType?: string;
    contentDisposition?: string;
    headers?: { [key: string]: Array<string>; };
    length?: number;
    name?: string;
    fileName?: string;
}

/**
 * 
 */
export class MediaApi extends runtime.BaseAPI {

    /**
     */
    async apiMediaPostRaw(requestParameters: ApiMediaPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StringApiResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters['contentType'] != null) {
            formParams.append('ContentType', requestParameters['contentType'] as any);
        }

        if (requestParameters['contentDisposition'] != null) {
            formParams.append('ContentDisposition', requestParameters['contentDisposition'] as any);
        }

        if (requestParameters['headers'] != null) {
            formParams.append('Headers', new Blob([JSON.stringify({ [key: string]: Array<string>; }ToJSON(requestParameters['headers']))], { type: "application/json", }));
                    }

        if (requestParameters['length'] != null) {
            formParams.append('Length', requestParameters['length'] as any);
        }

        if (requestParameters['name'] != null) {
            formParams.append('Name', requestParameters['name'] as any);
        }

        if (requestParameters['fileName'] != null) {
            formParams.append('FileName', requestParameters['fileName'] as any);
        }

        const response = await this.request({
            path: `/api/media`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StringApiResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiMediaPost(requestParameters: ApiMediaPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StringApiResponse> {
        const response = await this.apiMediaPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
