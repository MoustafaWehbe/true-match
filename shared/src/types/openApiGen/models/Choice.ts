/* tslint:disable */
/* eslint-disable */
/**
 * Dapp Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { IconUrl } from './IconUrl';
import {
    IconUrlFromJSON,
    IconUrlFromJSONTyped,
    IconUrlToJSON,
} from './IconUrl';

/**
 * 
 * @export
 * @interface Choice
 */
export interface Choice {
    /**
     * 
     * @type {string}
     * @memberof Choice
     */
    id?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Choice
     */
    name?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Choice
     */
    style?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Choice
     */
    emoji?: string | null;
    /**
     * 
     * @type {Array<IconUrl>}
     * @memberof Choice
     */
    iconUrls?: Array<IconUrl> | null;
    /**
     * 
     * @type {string}
     * @memberof Choice
     */
    matchGroupKey?: string | null;
}

/**
 * Check if a given object implements the Choice interface.
 */
export function instanceOfChoice(value: object): value is Choice {
    return true;
}

export function ChoiceFromJSON(json: any): Choice {
    return ChoiceFromJSONTyped(json, false);
}

export function ChoiceFromJSONTyped(json: any, ignoreDiscriminator: boolean): Choice {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'] == null ? undefined : json['id'],
        'name': json['name'] == null ? undefined : json['name'],
        'style': json['style'] == null ? undefined : json['style'],
        'emoji': json['emoji'] == null ? undefined : json['emoji'],
        'iconUrls': json['iconUrls'] == null ? undefined : ((json['iconUrls'] as Array<any>).map(IconUrlFromJSON)),
        'matchGroupKey': json['matchGroupKey'] == null ? undefined : json['matchGroupKey'],
    };
}

export function ChoiceToJSON(value?: Choice | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'id': value['id'],
        'name': value['name'],
        'style': value['style'],
        'emoji': value['emoji'],
        'iconUrls': value['iconUrls'] == null ? undefined : ((value['iconUrls'] as Array<any>).map(IconUrlToJSON)),
        'matchGroupKey': value['matchGroupKey'],
    };
}

