/* tslint:disable */
/* eslint-disable */
/**
 * Dapp Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { CoordinateSequence } from './CoordinateSequence';
import {
    CoordinateSequenceFromJSON,
    CoordinateSequenceFromJSONTyped,
    CoordinateSequenceToJSON,
} from './CoordinateSequence';
import type { Geometry } from './Geometry';
import {
    GeometryFromJSON,
    GeometryFromJSONTyped,
    GeometryToJSON,
} from './Geometry';
import type { GeometryFactory } from './GeometryFactory';
import {
    GeometryFactoryFromJSON,
    GeometryFactoryFromJSONTyped,
    GeometryFactoryToJSON,
} from './GeometryFactory';
import type { Coordinate } from './Coordinate';
import {
    CoordinateFromJSON,
    CoordinateFromJSONTyped,
    CoordinateToJSON,
} from './Coordinate';
import type { PrecisionModel } from './PrecisionModel';
import {
    PrecisionModelFromJSON,
    PrecisionModelFromJSONTyped,
    PrecisionModelToJSON,
} from './PrecisionModel';
import type { Dimension } from './Dimension';
import {
    DimensionFromJSON,
    DimensionFromJSONTyped,
    DimensionToJSON,
} from './Dimension';
import type { Envelope } from './Envelope';
import {
    EnvelopeFromJSON,
    EnvelopeFromJSONTyped,
    EnvelopeToJSON,
} from './Envelope';
import type { OgcGeometryType } from './OgcGeometryType';
import {
    OgcGeometryTypeFromJSON,
    OgcGeometryTypeFromJSONTyped,
    OgcGeometryTypeToJSON,
} from './OgcGeometryType';

/**
 * 
 * @export
 * @interface Point
 */
export interface Point {
    /**
     * 
     * @type {GeometryFactory}
     * @memberof Point
     */
    factory?: GeometryFactory;
    /**
     * 
     * @type {any}
     * @memberof Point
     */
    userData?: any | null;
    /**
     * 
     * @type {number}
     * @memberof Point
     */
    srid?: number;
    /**
     * 
     * @type {PrecisionModel}
     * @memberof Point
     */
    precisionModel?: PrecisionModel;
    /**
     * 
     * @type {number}
     * @memberof Point
     */
    readonly numGeometries?: number;
    /**
     * 
     * @type {boolean}
     * @memberof Point
     */
    readonly isSimple?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Point
     */
    readonly isValid?: boolean;
    /**
     * 
     * @type {number}
     * @memberof Point
     */
    readonly area?: number;
    /**
     * 
     * @type {number}
     * @memberof Point
     */
    readonly length?: number;
    /**
     * 
     * @type {Point}
     * @memberof Point
     */
    centroid?: Point;
    /**
     * 
     * @type {Point}
     * @memberof Point
     */
    interiorPoint?: Point;
    /**
     * 
     * @type {Point}
     * @memberof Point
     */
    pointOnSurface?: Point;
    /**
     * 
     * @type {Geometry}
     * @memberof Point
     */
    envelope?: Geometry;
    /**
     * 
     * @type {Envelope}
     * @memberof Point
     */
    envelopeInternal?: Envelope;
    /**
     * 
     * @type {boolean}
     * @memberof Point
     */
    readonly isRectangle?: boolean;
    /**
     * 
     * @type {CoordinateSequence}
     * @memberof Point
     */
    coordinateSequence?: CoordinateSequence;
    /**
     * 
     * @type {Array<Coordinate>}
     * @memberof Point
     */
    readonly coordinates?: Array<Coordinate> | null;
    /**
     * 
     * @type {number}
     * @memberof Point
     */
    readonly numPoints?: number;
    /**
     * 
     * @type {boolean}
     * @memberof Point
     */
    readonly isEmpty?: boolean;
    /**
     * 
     * @type {Dimension}
     * @memberof Point
     */
    dimension?: Dimension;
    /**
     * 
     * @type {Dimension}
     * @memberof Point
     */
    boundaryDimension?: Dimension;
    /**
     * 
     * @type {number}
     * @memberof Point
     */
    x?: number;
    /**
     * 
     * @type {number}
     * @memberof Point
     */
    y?: number;
    /**
     * 
     * @type {Coordinate}
     * @memberof Point
     */
    coordinate?: Coordinate;
    /**
     * 
     * @type {string}
     * @memberof Point
     */
    readonly geometryType?: string | null;
    /**
     * 
     * @type {OgcGeometryType}
     * @memberof Point
     */
    ogcGeometryType?: OgcGeometryType;
    /**
     * 
     * @type {Geometry}
     * @memberof Point
     */
    boundary?: Geometry;
    /**
     * 
     * @type {number}
     * @memberof Point
     */
    z?: number;
    /**
     * 
     * @type {number}
     * @memberof Point
     */
    m?: number;
}



/**
 * Check if a given object implements the Point interface.
 */
export function instanceOfPoint(value: object): value is Point {
    return true;
}

export function PointFromJSON(json: any): Point {
    return PointFromJSONTyped(json, false);
}

export function PointFromJSONTyped(json: any, ignoreDiscriminator: boolean): Point {
    if (json == null) {
        return json;
    }
    return {
        
        'factory': json['factory'] == null ? undefined : GeometryFactoryFromJSON(json['factory']),
        'userData': json['userData'] == null ? undefined : json['userData'],
        'srid': json['srid'] == null ? undefined : json['srid'],
        'precisionModel': json['precisionModel'] == null ? undefined : PrecisionModelFromJSON(json['precisionModel']),
        'numGeometries': json['numGeometries'] == null ? undefined : json['numGeometries'],
        'isSimple': json['isSimple'] == null ? undefined : json['isSimple'],
        'isValid': json['isValid'] == null ? undefined : json['isValid'],
        'area': json['area'] == null ? undefined : json['area'],
        'length': json['length'] == null ? undefined : json['length'],
        'centroid': json['centroid'] == null ? undefined : PointFromJSON(json['centroid']),
        'interiorPoint': json['interiorPoint'] == null ? undefined : PointFromJSON(json['interiorPoint']),
        'pointOnSurface': json['pointOnSurface'] == null ? undefined : PointFromJSON(json['pointOnSurface']),
        'envelope': json['envelope'] == null ? undefined : GeometryFromJSON(json['envelope']),
        'envelopeInternal': json['envelopeInternal'] == null ? undefined : EnvelopeFromJSON(json['envelopeInternal']),
        'isRectangle': json['isRectangle'] == null ? undefined : json['isRectangle'],
        'coordinateSequence': json['coordinateSequence'] == null ? undefined : CoordinateSequenceFromJSON(json['coordinateSequence']),
        'coordinates': json['coordinates'] == null ? undefined : ((json['coordinates'] as Array<any>).map(CoordinateFromJSON)),
        'numPoints': json['numPoints'] == null ? undefined : json['numPoints'],
        'isEmpty': json['isEmpty'] == null ? undefined : json['isEmpty'],
        'dimension': json['dimension'] == null ? undefined : DimensionFromJSON(json['dimension']),
        'boundaryDimension': json['boundaryDimension'] == null ? undefined : DimensionFromJSON(json['boundaryDimension']),
        'x': json['x'] == null ? undefined : json['x'],
        'y': json['y'] == null ? undefined : json['y'],
        'coordinate': json['coordinate'] == null ? undefined : CoordinateFromJSON(json['coordinate']),
        'geometryType': json['geometryType'] == null ? undefined : json['geometryType'],
        'ogcGeometryType': json['ogcGeometryType'] == null ? undefined : OgcGeometryTypeFromJSON(json['ogcGeometryType']),
        'boundary': json['boundary'] == null ? undefined : GeometryFromJSON(json['boundary']),
        'z': json['z'] == null ? undefined : json['z'],
        'm': json['m'] == null ? undefined : json['m'],
    };
}

export function PointToJSON(value?: Omit<Point, 'numGeometries'|'isSimple'|'isValid'|'area'|'length'|'isRectangle'|'coordinates'|'numPoints'|'isEmpty'|'geometryType'> | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'factory': GeometryFactoryToJSON(value['factory']),
        'userData': value['userData'],
        'srid': value['srid'],
        'precisionModel': PrecisionModelToJSON(value['precisionModel']),
        'centroid': PointToJSON(value['centroid']),
        'interiorPoint': PointToJSON(value['interiorPoint']),
        'pointOnSurface': PointToJSON(value['pointOnSurface']),
        'envelope': GeometryToJSON(value['envelope']),
        'envelopeInternal': EnvelopeToJSON(value['envelopeInternal']),
        'coordinateSequence': CoordinateSequenceToJSON(value['coordinateSequence']),
        'dimension': DimensionToJSON(value['dimension']),
        'boundaryDimension': DimensionToJSON(value['boundaryDimension']),
        'x': value['x'],
        'y': value['y'],
        'coordinate': CoordinateToJSON(value['coordinate']),
        'ogcGeometryType': OgcGeometryTypeToJSON(value['ogcGeometryType']),
        'boundary': GeometryToJSON(value['boundary']),
        'z': value['z'],
        'm': value['m'],
    };
}

