/* tslint:disable */
/* eslint-disable */
/**
 * Dapp Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { User } from './User';
import {
    UserFromJSON,
    UserFromJSONTyped,
    UserToJSON,
} from './User';
import type { MatchOrigin } from './MatchOrigin';
import {
    MatchOriginFromJSON,
    MatchOriginFromJSONTyped,
    MatchOriginToJSON,
} from './MatchOrigin';

/**
 * 
 * @export
 * @interface Match
 */
export interface Match {
    /**
     * 
     * @type {number}
     * @memberof Match
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof Match
     */
    user1Id?: string | null;
    /**
     * 
     * @type {User}
     * @memberof Match
     */
    user1?: User;
    /**
     * 
     * @type {string}
     * @memberof Match
     */
    user2Id?: string | null;
    /**
     * 
     * @type {User}
     * @memberof Match
     */
    user2?: User;
    /**
     * 
     * @type {MatchOrigin}
     * @memberof Match
     */
    origin?: MatchOrigin;
    /**
     * 
     * @type {Date}
     * @memberof Match
     */
    createdAt?: Date;
    /**
     * 
     * @type {Date}
     * @memberof Match
     */
    updatedAt?: Date;
}



/**
 * Check if a given object implements the Match interface.
 */
export function instanceOfMatch(value: object): value is Match {
    return true;
}

export function MatchFromJSON(json: any): Match {
    return MatchFromJSONTyped(json, false);
}

export function MatchFromJSONTyped(json: any, ignoreDiscriminator: boolean): Match {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'] == null ? undefined : json['id'],
        'user1Id': json['user1Id'] == null ? undefined : json['user1Id'],
        'user1': json['user1'] == null ? undefined : UserFromJSON(json['user1']),
        'user2Id': json['user2Id'] == null ? undefined : json['user2Id'],
        'user2': json['user2'] == null ? undefined : UserFromJSON(json['user2']),
        'origin': json['origin'] == null ? undefined : MatchOriginFromJSON(json['origin']),
        'createdAt': json['createdAt'] == null ? undefined : (new Date(json['createdAt'])),
        'updatedAt': json['updatedAt'] == null ? undefined : (new Date(json['updatedAt'])),
    };
}

export function MatchToJSON(value?: Match | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'id': value['id'],
        'user1Id': value['user1Id'],
        'user1': UserToJSON(value['user1']),
        'user2Id': value['user2Id'],
        'user2': UserToJSON(value['user2']),
        'origin': MatchOriginToJSON(value['origin']),
        'createdAt': value['createdAt'] == null ? undefined : ((value['createdAt']).toISOString()),
        'updatedAt': value['updatedAt'] == null ? undefined : ((value['updatedAt']).toISOString()),
    };
}

