/* tslint:disable */
/* eslint-disable */
/**
 * Dapp Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { UserProfileGender } from './UserProfileGender';
import {
    UserProfileGenderFromJSON,
    UserProfileGenderFromJSONTyped,
    UserProfileGenderToJSON,
} from './UserProfileGender';

/**
 * 
 * @export
 * @interface Gender
 */
export interface Gender {
    /**
     * 
     * @type {number}
     * @memberof Gender
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof Gender
     */
    name?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Gender
     */
    description?: string | null;
    /**
     * 
     * @type {number}
     * @memberof Gender
     */
    parentId?: number | null;
    /**
     * 
     * @type {string}
     * @memberof Gender
     */
    parent?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof Gender
     */
    children?: Array<string> | null;
    /**
     * 
     * @type {Array<UserProfileGender>}
     * @memberof Gender
     */
    userProfileGenders?: Array<UserProfileGender> | null;
}

/**
 * Check if a given object implements the Gender interface.
 */
export function instanceOfGender(value: object): value is Gender {
    return true;
}

export function GenderFromJSON(json: any): Gender {
    return GenderFromJSONTyped(json, false);
}

export function GenderFromJSONTyped(json: any, ignoreDiscriminator: boolean): Gender {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'] == null ? undefined : json['id'],
        'name': json['name'] == null ? undefined : json['name'],
        'description': json['description'] == null ? undefined : json['description'],
        'parentId': json['parentId'] == null ? undefined : json['parentId'],
        'parent': json['parent'] == null ? undefined : json['parent'],
        'children': json['children'] == null ? undefined : json['children'],
        'userProfileGenders': json['userProfileGenders'] == null ? undefined : ((json['userProfileGenders'] as Array<any>).map(UserProfileGenderFromJSON)),
    };
}

export function GenderToJSON(value?: Gender | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'id': value['id'],
        'name': value['name'],
        'description': value['description'],
        'parentId': value['parentId'],
        'parent': value['parent'],
        'children': value['children'],
        'userProfileGenders': value['userProfileGenders'] == null ? undefined : ((value['userProfileGenders'] as Array<any>).map(UserProfileGenderToJSON)),
    };
}

