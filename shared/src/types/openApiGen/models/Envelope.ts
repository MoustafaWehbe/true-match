/* tslint:disable */
/* eslint-disable */
/**
 * Dapp Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Coordinate } from './Coordinate';
import {
    CoordinateFromJSON,
    CoordinateFromJSONTyped,
    CoordinateToJSON,
} from './Coordinate';

/**
 * 
 * @export
 * @interface Envelope
 */
export interface Envelope {
    /**
     * 
     * @type {boolean}
     * @memberof Envelope
     */
    readonly isNull?: boolean;
    /**
     * 
     * @type {number}
     * @memberof Envelope
     */
    readonly width?: number;
    /**
     * 
     * @type {number}
     * @memberof Envelope
     */
    readonly height?: number;
    /**
     * 
     * @type {number}
     * @memberof Envelope
     */
    readonly diameter?: number;
    /**
     * 
     * @type {number}
     * @memberof Envelope
     */
    readonly minX?: number;
    /**
     * 
     * @type {number}
     * @memberof Envelope
     */
    readonly maxX?: number;
    /**
     * 
     * @type {number}
     * @memberof Envelope
     */
    readonly minY?: number;
    /**
     * 
     * @type {number}
     * @memberof Envelope
     */
    readonly maxY?: number;
    /**
     * 
     * @type {number}
     * @memberof Envelope
     */
    readonly area?: number;
    /**
     * 
     * @type {number}
     * @memberof Envelope
     */
    readonly minExtent?: number;
    /**
     * 
     * @type {number}
     * @memberof Envelope
     */
    readonly maxExtent?: number;
    /**
     * 
     * @type {Coordinate}
     * @memberof Envelope
     */
    centre?: Coordinate;
}

/**
 * Check if a given object implements the Envelope interface.
 */
export function instanceOfEnvelope(value: object): value is Envelope {
    return true;
}

export function EnvelopeFromJSON(json: any): Envelope {
    return EnvelopeFromJSONTyped(json, false);
}

export function EnvelopeFromJSONTyped(json: any, ignoreDiscriminator: boolean): Envelope {
    if (json == null) {
        return json;
    }
    return {
        
        'isNull': json['isNull'] == null ? undefined : json['isNull'],
        'width': json['width'] == null ? undefined : json['width'],
        'height': json['height'] == null ? undefined : json['height'],
        'diameter': json['diameter'] == null ? undefined : json['diameter'],
        'minX': json['minX'] == null ? undefined : json['minX'],
        'maxX': json['maxX'] == null ? undefined : json['maxX'],
        'minY': json['minY'] == null ? undefined : json['minY'],
        'maxY': json['maxY'] == null ? undefined : json['maxY'],
        'area': json['area'] == null ? undefined : json['area'],
        'minExtent': json['minExtent'] == null ? undefined : json['minExtent'],
        'maxExtent': json['maxExtent'] == null ? undefined : json['maxExtent'],
        'centre': json['centre'] == null ? undefined : CoordinateFromJSON(json['centre']),
    };
}

export function EnvelopeToJSON(value?: Omit<Envelope, 'isNull'|'width'|'height'|'diameter'|'minX'|'maxX'|'minY'|'maxY'|'area'|'minExtent'|'maxExtent'> | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'centre': CoordinateToJSON(value['centre']),
    };
}

