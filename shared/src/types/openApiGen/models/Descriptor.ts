/* tslint:disable */
/* eslint-disable */
/**
 * Dapp Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { IconUrl } from './IconUrl';
import {
    IconUrlFromJSON,
    IconUrlFromJSONTyped,
    IconUrlToJSON,
} from './IconUrl';
import type { Choice } from './Choice';
import {
    ChoiceFromJSON,
    ChoiceFromJSONTyped,
    ChoiceToJSON,
} from './Choice';
import type { MeasurableDetails } from './MeasurableDetails';
import {
    MeasurableDetailsFromJSON,
    MeasurableDetailsFromJSONTyped,
    MeasurableDetailsToJSON,
} from './MeasurableDetails';

/**
 * 
 * @export
 * @interface Descriptor
 */
export interface Descriptor {
    /**
     * 
     * @type {string}
     * @memberof Descriptor
     */
    id?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Descriptor
     */
    prompt?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Descriptor
     */
    name?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Descriptor
     */
    subPrompt?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Descriptor
     */
    type?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Descriptor
     */
    iconUrl?: string | null;
    /**
     * 
     * @type {Array<IconUrl>}
     * @memberof Descriptor
     */
    iconUrls?: Array<IconUrl> | null;
    /**
     * 
     * @type {string}
     * @memberof Descriptor
     */
    backgroundText?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Descriptor
     */
    searchBackgroundText?: string | null;
    /**
     * 
     * @type {MeasurableDetails}
     * @memberof Descriptor
     */
    measurableDetails?: MeasurableDetails;
    /**
     * 
     * @type {number}
     * @memberof Descriptor
     */
    sectionId?: number | null;
    /**
     * 
     * @type {string}
     * @memberof Descriptor
     */
    sectionName?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Descriptor
     */
    matchGroupKey?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof Descriptor
     */
    discoveryPreferencesEnabled?: boolean;
    /**
     * 
     * @type {number}
     * @memberof Descriptor
     */
    minSelections?: number | null;
    /**
     * 
     * @type {number}
     * @memberof Descriptor
     */
    maxSelections?: number | null;
    /**
     * 
     * @type {boolean}
     * @memberof Descriptor
     */
    shouldLocalizeChoices?: boolean;
    /**
     * 
     * @type {Array<Choice>}
     * @memberof Descriptor
     */
    choices?: Array<Choice> | null;
}

/**
 * Check if a given object implements the Descriptor interface.
 */
export function instanceOfDescriptor(value: object): value is Descriptor {
    return true;
}

export function DescriptorFromJSON(json: any): Descriptor {
    return DescriptorFromJSONTyped(json, false);
}

export function DescriptorFromJSONTyped(json: any, ignoreDiscriminator: boolean): Descriptor {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'] == null ? undefined : json['id'],
        'prompt': json['prompt'] == null ? undefined : json['prompt'],
        'name': json['name'] == null ? undefined : json['name'],
        'subPrompt': json['subPrompt'] == null ? undefined : json['subPrompt'],
        'type': json['type'] == null ? undefined : json['type'],
        'iconUrl': json['iconUrl'] == null ? undefined : json['iconUrl'],
        'iconUrls': json['iconUrls'] == null ? undefined : ((json['iconUrls'] as Array<any>).map(IconUrlFromJSON)),
        'backgroundText': json['backgroundText'] == null ? undefined : json['backgroundText'],
        'searchBackgroundText': json['searchBackgroundText'] == null ? undefined : json['searchBackgroundText'],
        'measurableDetails': json['measurableDetails'] == null ? undefined : MeasurableDetailsFromJSON(json['measurableDetails']),
        'sectionId': json['sectionId'] == null ? undefined : json['sectionId'],
        'sectionName': json['sectionName'] == null ? undefined : json['sectionName'],
        'matchGroupKey': json['matchGroupKey'] == null ? undefined : json['matchGroupKey'],
        'discoveryPreferencesEnabled': json['discoveryPreferencesEnabled'] == null ? undefined : json['discoveryPreferencesEnabled'],
        'minSelections': json['minSelections'] == null ? undefined : json['minSelections'],
        'maxSelections': json['maxSelections'] == null ? undefined : json['maxSelections'],
        'shouldLocalizeChoices': json['shouldLocalizeChoices'] == null ? undefined : json['shouldLocalizeChoices'],
        'choices': json['choices'] == null ? undefined : ((json['choices'] as Array<any>).map(ChoiceFromJSON)),
    };
}

export function DescriptorToJSON(value?: Descriptor | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'id': value['id'],
        'prompt': value['prompt'],
        'name': value['name'],
        'subPrompt': value['subPrompt'],
        'type': value['type'],
        'iconUrl': value['iconUrl'],
        'iconUrls': value['iconUrls'] == null ? undefined : ((value['iconUrls'] as Array<any>).map(IconUrlToJSON)),
        'backgroundText': value['backgroundText'],
        'searchBackgroundText': value['searchBackgroundText'],
        'measurableDetails': MeasurableDetailsToJSON(value['measurableDetails']),
        'sectionId': value['sectionId'],
        'sectionName': value['sectionName'],
        'matchGroupKey': value['matchGroupKey'],
        'discoveryPreferencesEnabled': value['discoveryPreferencesEnabled'],
        'minSelections': value['minSelections'],
        'maxSelections': value['maxSelections'],
        'shouldLocalizeChoices': value['shouldLocalizeChoices'],
        'choices': value['choices'] == null ? undefined : ((value['choices'] as Array<any>).map(ChoiceToJSON)),
    };
}

