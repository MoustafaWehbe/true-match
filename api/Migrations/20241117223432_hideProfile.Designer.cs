// <auto-generated />
using System;
using System.Collections.Generic;
using System.Text.Json;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetTopologySuite.Geometries;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using api.Data;

#nullable disable

namespace api.Migrations
{
    [DbContext(typeof(ApplicationDBContext))]
    [Migration("20241117223432_hideProfile")]
    partial class hideProfile
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "messagestatus", "message_status", new[] { "sent", "delivered", "read" });
            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "postgis");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "d78cfc52-53f6-439e-909a-a12254eaaa54",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "895c6a7c-36e1-4e66-bfe2-abf99fbac40f",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("api.Models.AvailableDescriptor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<JsonDocument>("Descriptors")
                        .HasColumnType("jsonb")
                        .HasAnnotation("Relational:JsonPropertyName", "descriptors");

                    b.Property<string>("DisplayType")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "displayType");

                    b.Property<string>("Prompt")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "prompt");

                    b.Property<string>("SectionName")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "sectionName");

                    b.HasKey("Id");

                    b.ToTable("AvailableDescriptors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Descriptors = System.Text.Json.JsonDocument.Parse("[\n        {\n          \"id\": \"de_30\",\n          \"prompt\": \"Here’s where you can add your height to your profile.\",\n          \"type\": \"measurement\",\n          \"iconUrl\": \"https://static-assets.gotinder.com/icons/descriptors/height@3x.png\",\n          \"iconUrls\": [\n            {\n              \"url\": \"https://static-assets.gotinder.com/icons/descriptors/height@1x.png\",\n              \"quality\": \"1x\",\n              \"width\": 16,\n              \"height\": 16\n            },\n            {\n              \"url\": \"https://static-assets.gotinder.com/icons/descriptors/height@2x.png\",\n              \"quality\": \"2x\",\n              \"width\": 32,\n              \"height\": 32\n            },\n            {\n              \"url\": \"https://static-assets.gotinder.com/icons/descriptors/height@3x.png\",\n              \"quality\": \"3x\",\n              \"width\": 48,\n              \"height\": 48\n            }\n          ],\n          \"backgroundText\": \"Add height\",\n          \"measurableDetails\": {\n            \"min\": 90,\n            \"max\": 241,\n            \"unitOfMeasure\": \"cm\",\n            \"defaultUnitOfMeasure\": \"cm\"\n          },\n          \"sectionId\": 1,\n          \"sectionName\": \"Height\",\n          \"matchGroupKey\": \"height\",\n          \"discoveryPreferencesEnabled\": false\n        }\n      ]", new System.Text.Json.JsonDocumentOptions()),
                            DisplayType = "section",
                            Prompt = "Here’s where you can add your height to your profile",
                            SectionName = "Height"
                        },
                        new
                        {
                            Id = 2,
                            Descriptors = System.Text.Json.JsonDocument.Parse("[\n        {\n          \"id\": \"de_37\",\n          \"type\": \"multiSelectionSet\",\n          \"choices\": [\n            {\n              \"id\": \"it_2275\",\n              \"name\": \"Harry Potter\"\n            },\n            {\n              \"id\": \"it_2033\",\n              \"name\": \"’90s kid\"\n            },\n            {\n              \"id\": \"it_2396\",\n              \"name\": \"SoundCloud\"\n            },\n            {\n              \"id\": \"it_2397\",\n              \"name\": \"Spa\"\n            },\n            {\n              \"id\": \"it_2155\",\n              \"name\": \"Self-care\"\n            },\n            {\n              \"id\": \"it_2276\",\n              \"name\": \"Heavy metal\"\n            },\n            {\n              \"id\": \"it_2031\",\n              \"name\": \"House parties\"\n            },\n            {\n              \"id\": \"it_2152\",\n              \"name\": \"Gin & tonic\"\n            },\n            {\n              \"id\": \"it_2273\",\n              \"name\": \"Gymnastics\"\n            },\n            {\n              \"id\": \"it_2279\",\n              \"name\": \"Hot yoga\"\n            },\n            {\n              \"id\": \"it_2159\",\n              \"name\": \"Meditation\"\n            },\n            {\n              \"id\": \"it_2398\",\n              \"name\": \"Spotify\"\n            },\n            {\n              \"id\": \"it_2035\",\n              \"name\": \"Sushi\"\n            },\n            {\n              \"id\": \"it_2277\",\n              \"name\": \"Hockey\"\n            },\n            {\n              \"id\": \"it_2156\",\n              \"name\": \"Basketball\"\n            },\n            {\n              \"id\": \"it_2036\",\n              \"name\": \"Slam poetry\"\n            },\n            {\n              \"id\": \"it_2278\",\n              \"name\": \"Home workouts\"\n            },\n            {\n              \"id\": \"it_2157\",\n              \"name\": \"Theatre\"\n            },\n            {\n              \"id\": \"it_33\",\n              \"name\": \"Café hopping\"\n            },\n            {\n              \"id\": \"it_36\",\n              \"name\": \"Aquarium\"\n            },\n            {\n              \"id\": \"it_2039\",\n              \"name\": \"Trainers\"\n            },\n            {\n              \"id\": \"it_35\",\n              \"name\": \"Instagram\"\n            },\n            {\n              \"id\": \"it_30\",\n              \"name\": \"Hot springs\"\n            },\n            {\n              \"id\": \"it_31\",\n              \"name\": \"Walking\"\n            },\n            {\n              \"id\": \"it_4\",\n              \"name\": \"Running\"\n            },\n            {\n              \"id\": \"it_7\",\n              \"name\": \"Travel\"\n            },\n            {\n              \"id\": \"it_6\",\n              \"name\": \"Language exchange\"\n            },\n            {\n              \"id\": \"it_9\",\n              \"name\": \"Films\"\n            },\n            {\n              \"id\": \"it_2271\",\n              \"name\": \"Guitarists\"\n            },\n            {\n              \"id\": \"it_2392\",\n              \"name\": \"Social development\"\n            },\n            {\n              \"id\": \"it_2272\",\n              \"name\": \"Gym\"\n            },\n            {\n              \"id\": \"it_2393\",\n              \"name\": \"Social media\"\n            },\n            {\n              \"id\": \"it_2030\",\n              \"name\": \"Hip hop\"\n            },\n            {\n              \"id\": \"it_2390\",\n              \"name\": \"Skincare\"\n            },\n            {\n              \"id\": \"it_2022\",\n              \"name\": \"J-Pop\"\n            },\n            {\n              \"id\": \"it_2386\",\n              \"name\": \"Shisha\"\n            },\n            {\n              \"id\": \"it_2023\",\n              \"name\": \"Cricket\"\n            },\n            {\n              \"id\": \"it_2262\",\n              \"name\": \"Freelance\"\n            },\n            {\n              \"id\": \"it_2389\",\n              \"name\": \"Skateboarding\"\n            },\n            {\n              \"id\": \"it_2268\",\n              \"name\": \"Gospel\"\n            },\n            {\n              \"id\": \"it_27\",\n              \"name\": \"K-Pop\"\n            },\n            {\n              \"id\": \"it_2027\",\n              \"name\": \"Potterhead\"\n            },\n            {\n              \"id\": \"it_26\",\n              \"name\": \"Trying new things\"\n            },\n            {\n              \"id\": \"it_29\",\n              \"name\": \"Photography\"\n            },\n            {\n              \"id\": \"it_2024\",\n              \"name\": \"Bollywood\"\n            },\n            {\n              \"id\": \"it_28\",\n              \"name\": \"Reading\"\n            },\n            {\n              \"id\": \"it_2388\",\n              \"name\": \"Singing\"\n            },\n            {\n              \"id\": \"it_23\",\n              \"name\": \"Sports\"\n            },\n            {\n              \"id\": \"it_2028\",\n              \"name\": \"Poetry\"\n            },\n            {\n              \"id\": \"it_2029\",\n              \"name\": \"Stand-up comedy\"\n            },\n            {\n              \"id\": \"it_1\",\n              \"name\": \"Coffee\"\n            },\n            {\n              \"id\": \"it_3\",\n              \"name\": \"Karaoke\"\n            },\n            {\n              \"id\": \"it_2260\",\n              \"name\": \"Fortnite\"\n            },\n            {\n              \"id\": \"it_2261\",\n              \"name\": \"Free diving\"\n            },\n            {\n              \"id\": \"it_2382\",\n              \"name\": \"Self-development\"\n            },\n            {\n              \"id\": \"it_2055\",\n              \"name\": \"Mental health awareness\"\n            },\n            {\n              \"id\": \"it_19\",\n              \"name\": \"Foodie tour\"\n            },\n            {\n              \"id\": \"it_2053\",\n              \"name\": \"Voter rights\"\n            },\n            {\n              \"id\": \"it_2295\",\n              \"name\": \"Jiu-jitsu\"\n            },\n            {\n              \"id\": \"it_2054\",\n              \"name\": \"Climate change\"\n            },\n            {\n              \"id\": \"it_16\",\n              \"name\": \"Exhibition\"\n            },\n            {\n              \"id\": \"it_15\",\n              \"name\": \"Walking my dog\"\n            },\n            {\n              \"id\": \"it_2057\",\n              \"name\": \"LGBTQIA+ rights\"\n            },\n            {\n              \"id\": \"it_2058\",\n              \"name\": \"Feminism\"\n            },\n            {\n              \"id\": \"it_12\",\n              \"name\": \"VR room\"\n            },\n            {\n              \"id\": \"it_11\",\n              \"name\": \"Escape café\"\n            },\n            {\n              \"id\": \"it_14\",\n              \"name\": \"Shopping\"\n            },\n            {\n              \"id\": \"it_10\",\n              \"name\": \"Brunch\"\n            },\n            {\n              \"id\": \"it_2290\",\n              \"name\": \"Investment\"\n            },\n            {\n              \"id\": \"it_2293\",\n              \"name\": \"Jet skiing\"\n            },\n            {\n              \"id\": \"it_2172\",\n              \"name\": \"Reggaeton\"\n            },\n            {\n              \"id\": \"it_2051\",\n              \"name\": \"Vintage clothing\"\n            },\n            {\n              \"id\": \"it_2052\",\n              \"name\": \"Black Lives Matter\"\n            },\n            {\n              \"id\": \"it_2294\",\n              \"name\": \"Jogging\"\n            },\n            {\n              \"id\": \"it_2050\",\n              \"name\": \"Road trips\"\n            },\n            {\n              \"id\": \"it_2171\",\n              \"name\": \"Vintage fashion\"\n            },\n            {\n              \"id\": \"it_2165\",\n              \"name\": \"Voguing\"\n            },\n            {\n              \"id\": \"it_2166\",\n              \"name\": \"Sofa surfing\"\n            },\n            {\n              \"id\": \"it_2163\",\n              \"name\": \"Happy hour\"\n            },\n            {\n              \"id\": \"it_2285\",\n              \"name\": \"Inclusivity\"\n            },\n            {\n              \"id\": \"it_2048\",\n              \"name\": \"Country music\"\n            },\n            {\n              \"id\": \"it_2049\",\n              \"name\": \"Football\"\n            },\n            {\n              \"id\": \"it_2288\",\n              \"name\": \"Rollerblading\"\n            },\n            {\n              \"id\": \"it_2289\",\n              \"name\": \"Investing\"\n            },\n            {\n              \"id\": \"it_2161\",\n              \"name\": \"Tennis\"\n            },\n            {\n              \"id\": \"it_2282\",\n              \"name\": \"Ice cream\"\n            },\n            {\n              \"id\": \"it_2283\",\n              \"name\": \"Ice skating\"\n            },\n            {\n              \"id\": \"it_2280\",\n              \"name\": \"Human rights\"\n            },\n            {\n              \"id\": \"it_2160\",\n              \"name\": \"Exhibitions\"\n            },\n            {\n              \"id\": \"it_2352\",\n              \"name\": \"Pig roast\"\n            },\n            {\n              \"id\": \"it_1021\",\n              \"name\": \"Skiing\"\n            },\n            {\n              \"id\": \"it_2232\",\n              \"name\": \"Canoeing\"\n            },\n            {\n              \"id\": \"it_2111\",\n              \"name\": \"West End musicals\"\n            },\n            {\n              \"id\": \"it_1022\",\n              \"name\": \"Snowboarding\"\n            },\n            {\n              \"id\": \"it_2353\",\n              \"name\": \"Pilates\"\n            },\n            {\n              \"id\": \"it_2351\",\n              \"name\": \"Pentathlon\"\n            },\n            {\n              \"id\": \"it_2230\",\n              \"name\": \"Broadway\"\n            },\n            {\n              \"id\": \"it_2356\",\n              \"name\": \"PlayStation\"\n            },\n            {\n              \"id\": \"it_2235\",\n              \"name\": \"Cheerleading\"\n            },\n            {\n              \"id\": \"it_2236\",\n              \"name\": \"Choir\"\n            },\n            {\n              \"id\": \"it_2357\",\n              \"name\": \"Pole dancing\"\n            },\n            {\n              \"id\": \"it_2115\",\n              \"name\": \"Five-a-side football\"\n            },\n            {\n              \"id\": \"it_2233\",\n              \"name\": \"Car racing\"\n            },\n            {\n              \"id\": \"it_2354\",\n              \"name\": \"Pinterest\"\n            },\n            {\n              \"id\": \"it_2113\",\n              \"name\": \"Pub quiz\"\n            },\n            {\n              \"id\": \"it_1024\",\n              \"name\": \"Festivals\"\n            },\n            {\n              \"id\": \"it_2234\",\n              \"name\": \"Catan\"\n            },\n            {\n              \"id\": \"it_2239\",\n              \"name\": \"Cosplay\"\n            },\n            {\n              \"id\": \"it_2119\",\n              \"name\": \"Motor sports\"\n            },\n            {\n              \"id\": \"it_2237\",\n              \"name\": \"Coffee stands\"\n            },\n            {\n              \"id\": \"it_2238\",\n              \"name\": \"Content creation\"\n            },\n            {\n              \"id\": \"it_2117\",\n              \"name\": \"E-sports\"\n            },\n            {\n              \"id\": \"it_2220\",\n              \"name\": \"Bicycle racing\"\n            },\n            {\n              \"id\": \"it_2221\",\n              \"name\": \"Binge-watching TV series\"\n            },\n            {\n              \"id\": \"it_1011\",\n              \"name\": \"Songwriter\"\n            },\n            {\n              \"id\": \"it_2224\",\n              \"name\": \"Bodycombat\"\n            },\n            {\n              \"id\": \"it_1014\",\n              \"name\": \"Tattoos\"\n            },\n            {\n              \"id\": \"it_2346\",\n              \"name\": \"Painting\"\n            },\n            {\n              \"id\": \"it_2225\",\n              \"name\": \"Bodyjam\"\n            },\n            {\n              \"id\": \"it_2343\",\n              \"name\": \"Paddle boarding\"\n            },\n            {\n              \"id\": \"it_2344\",\n              \"name\": \"Padel\"\n            },\n            {\n              \"id\": \"it_2223\",\n              \"name\": \"Blackpink\"\n            },\n            {\n              \"id\": \"it_1013\",\n              \"name\": \"Surfing\"\n            },\n            {\n              \"id\": \"it_2228\",\n              \"name\": \"Bowling\"\n            },\n            {\n              \"id\": \"it_2107\",\n              \"name\": \"Grime\"\n            },\n            {\n              \"id\": \"it_2108\",\n              \"name\": \"’90s Britpop\"\n            },\n            {\n              \"id\": \"it_2226\",\n              \"name\": \"Bodypump\"\n            },\n            {\n              \"id\": \"it_2106\",\n              \"name\": \"Beach bars\"\n            },\n            {\n              \"id\": \"it_2227\",\n              \"name\": \"Bodystep\"\n            },\n            {\n              \"id\": \"it_2348\",\n              \"name\": \"Paragliding\"\n            },\n            {\n              \"id\": \"it_2109\",\n              \"name\": \"Upcycling\"\n            },\n            {\n              \"id\": \"it_2253\",\n              \"name\": \"Equality\"\n            },\n            {\n              \"id\": \"it_2011\",\n              \"name\": \"Astrology\"\n            },\n            {\n              \"id\": \"it_2133\",\n              \"name\": \"Motorcycles\"\n            },\n            {\n              \"id\": \"it_2254\",\n              \"name\": \"Equestrian\"\n            },\n            {\n              \"id\": \"it_2251\",\n              \"name\": \"Entrepreneurship\"\n            },\n            {\n              \"id\": \"it_2372\",\n              \"name\": \"Sake\"\n            },\n            {\n              \"id\": \"it_2131\",\n              \"name\": \"BTS\"\n            },\n            {\n              \"id\": \"it_2010\",\n              \"name\": \"Cooking\"\n            },\n            {\n              \"id\": \"it_2252\",\n              \"name\": \"Environmental protection\"\n            },\n            {\n              \"id\": \"it_2257\",\n              \"name\": \"Fencing\"\n            },\n            {\n              \"id\": \"it_2015\",\n              \"name\": \"Football\"\n            },\n            {\n              \"id\": \"it_2378\",\n              \"name\": \"Saxophonist\"\n            },\n            {\n              \"id\": \"it_2379\",\n              \"name\": \"Sci-fi\"\n            },\n            {\n              \"id\": \"it_2016\",\n              \"name\": \"Dancing\"\n            },\n            {\n              \"id\": \"it_2258\",\n              \"name\": \"Film festivals\"\n            },\n            {\n              \"id\": \"it_2013\",\n              \"name\": \"Gardening\"\n            },\n            {\n              \"id\": \"it_2135\",\n              \"name\": \"Amateur cook\"\n            },\n            {\n              \"id\": \"it_2256\",\n              \"name\": \"Exchange programmes\"\n            },\n            {\n              \"id\": \"it_2377\",\n              \"name\": \"Sauna\"\n            },\n            {\n              \"id\": \"it_2014\",\n              \"name\": \"Art\"\n            },\n            {\n              \"id\": \"it_2019\",\n              \"name\": \"Politics\"\n            },\n            {\n              \"id\": \"it_2259\",\n              \"name\": \"Flamenco\"\n            },\n            {\n              \"id\": \"it_2017\",\n              \"name\": \"Museum\"\n            },\n            {\n              \"id\": \"it_2018\",\n              \"name\": \"Activism\"\n            },\n            {\n              \"id\": \"it_2242\",\n              \"name\": \"DAOs\"\n            },\n            {\n              \"id\": \"it_2363\",\n              \"name\": \"Real estate\"\n            },\n            {\n              \"id\": \"it_2121\",\n              \"name\": \"Podcasts\"\n            },\n            {\n              \"id\": \"it_2243\",\n              \"name\": \"Disability rights\"\n            },\n            {\n              \"id\": \"it_2362\",\n              \"name\": \"Rave\"\n            },\n            {\n              \"id\": \"it_2120\",\n              \"name\": \"Pimms\"\n            },\n            {\n              \"id\": \"it_2246\",\n              \"name\": \"Drive-in cinema\"\n            },\n            {\n              \"id\": \"it_2367\",\n              \"name\": \"Rock climbing\"\n            },\n            {\n              \"id\": \"it_2125\",\n              \"name\": \"BBQ\"\n            },\n            {\n              \"id\": \"it_2004\",\n              \"name\": \"Craft beer\"\n            },\n            {\n              \"id\": \"it_2126\",\n              \"name\": \"Iced tea\"\n            },\n            {\n              \"id\": \"it_2247\",\n              \"name\": \"Drummer\"\n            },\n            {\n              \"id\": \"it_2005\",\n              \"name\": \"Tea\"\n            },\n            {\n              \"id\": \"it_2002\",\n              \"name\": \"Board games\"\n            },\n            {\n              \"id\": \"it_2365\",\n              \"name\": \"Roblox\"\n            },\n            {\n              \"id\": \"it_2123\",\n              \"name\": \"Pubs\"\n            },\n            {\n              \"id\": \"it_2366\",\n              \"name\": \"Rock\"\n            },\n            {\n              \"id\": \"it_2124\",\n              \"name\": \"Tango\"\n            },\n            {\n              \"id\": \"it_2245\",\n              \"name\": \"Drawing\"\n            },\n            {\n              \"id\": \"it_2003\",\n              \"name\": \"Trivia\"\n            },\n            {\n              \"id\": \"it_2129\",\n              \"name\": \"Pho\"\n            },\n            {\n              \"id\": \"it_2008\",\n              \"name\": \"Volunteering\"\n            },\n            {\n              \"id\": \"it_2009\",\n              \"name\": \"Environmentalism\"\n            },\n            {\n              \"id\": \"it_2369\",\n              \"name\": \"Rollerskating\"\n            },\n            {\n              \"id\": \"it_2006\",\n              \"name\": \"Wine\"\n            },\n            {\n              \"id\": \"it_2248\",\n              \"name\": \"Dungeons & Dragons\"\n            },\n            {\n              \"id\": \"it_2007\",\n              \"name\": \"Vlogging\"\n            },\n            {\n              \"id\": \"it_2249\",\n              \"name\": \"Electronic music\"\n            },\n            {\n              \"id\": \"it_2360\",\n              \"name\": \"Ramen\"\n            },\n            {\n              \"id\": \"it_2430\",\n              \"name\": \"Weightlifting\"\n            },\n            {\n              \"id\": \"it_2312\",\n              \"name\": \"Live music\"\n            },\n            {\n              \"id\": \"it_2433\",\n              \"name\": \"Writing\"\n            },\n            {\n              \"id\": \"it_2434\",\n              \"name\": \"Xbox\"\n            },\n            {\n              \"id\": \"it_2431\",\n              \"name\": \"World peace\"\n            },\n            {\n              \"id\": \"it_2432\",\n              \"name\": \"Wrestling\"\n            },\n            {\n              \"id\": \"it_2311\",\n              \"name\": \"Literature\"\n            },\n            {\n              \"id\": \"it_2316\",\n              \"name\": \"Manga\"\n            },\n            {\n              \"id\": \"it_2437\",\n              \"name\": \"Pride\"\n            },\n            {\n              \"id\": \"it_2317\",\n              \"name\": \"Marathon\"\n            },\n            {\n              \"id\": \"it_2314\",\n              \"name\": \"Make-up\"\n            },\n            {\n              \"id\": \"it_2435\",\n              \"name\": \"Youth empowerment\"\n            },\n            {\n              \"id\": \"it_2436\",\n              \"name\": \"YouTube\"\n            },\n            {\n              \"id\": \"it_2318\",\n              \"name\": \"Martial arts\"\n            },\n            {\n              \"id\": \"it_2319\",\n              \"name\": \"Marvel\"\n            },\n            {\n              \"id\": \"it_5020\",\n              \"name\": \"Luge\"\n            },\n            {\n              \"id\": \"it_5021\",\n              \"name\": \"Ice hockey\"\n            },\n            {\n              \"id\": \"it_5016\",\n              \"name\": \"Taekwondo\"\n            },\n            {\n              \"id\": \"it_5017\",\n              \"name\": \"Trampolining\"\n            },\n            {\n              \"id\": \"it_5018\",\n              \"name\": \"Water polo\"\n            },\n            {\n              \"id\": \"it_5012\",\n              \"name\": \"Rhythmic gymnastics\"\n            },\n            {\n              \"id\": \"it_2422\",\n              \"name\": \"Vegan cooking\"\n            },\n            {\n              \"id\": \"it_5013\",\n              \"name\": \"Rowing\"\n            },\n            {\n              \"id\": \"it_2423\",\n              \"name\": \"Vermouth\"\n            },\n            {\n              \"id\": \"it_2302\",\n              \"name\": \"Korean food\"\n            },\n            {\n              \"id\": \"it_5014\",\n              \"name\": \"Sports shooting\"\n            },\n            {\n              \"id\": \"it_2420\",\n              \"name\": \"Twitter\"\n            },\n            {\n              \"id\": \"it_5015\",\n              \"name\": \"Squash\"\n            },\n            {\n              \"id\": \"it_2426\",\n              \"name\": \"Volleyball\"\n            },\n            {\n              \"id\": \"it_2427\",\n              \"name\": \"Walking tours\"\n            },\n            {\n              \"id\": \"it_2424\",\n              \"name\": \"Vinyasa\"\n            },\n            {\n              \"id\": \"it_2425\",\n              \"name\": \"Virtual reality\"\n            },\n            {\n              \"id\": \"it_2309\",\n              \"name\": \"League of Legends\"\n            },\n            {\n              \"id\": \"it_5010\",\n              \"name\": \"Karate\"\n            },\n            {\n              \"id\": \"it_5011\",\n              \"name\": \"Lacrosse\"\n            },\n            {\n              \"id\": \"it_2334\",\n              \"name\": \"NFTs\"\n            },\n            {\n              \"id\": \"it_2213\",\n              \"name\": \"Pub crawls\"\n            },\n            {\n              \"id\": \"it_2335\",\n              \"name\": \"Nintendo\"\n            },\n            {\n              \"id\": \"it_2214\",\n              \"name\": \"Baseball\"\n            },\n            {\n              \"id\": \"it_1001\",\n              \"name\": \"Parties\"\n            },\n            {\n              \"id\": \"it_2211\",\n              \"name\": \"Ballet\"\n            },\n            {\n              \"id\": \"it_2212\",\n              \"name\": \"Bands\"\n            },\n            {\n              \"id\": \"it_2338\",\n              \"name\": \"Online games\"\n            },\n            {\n              \"id\": \"it_2217\",\n              \"name\": \"Battle Ground\"\n            },\n            {\n              \"id\": \"it_2218\",\n              \"name\": \"Beach tennis\"\n            },\n            {\n              \"id\": \"it_99\",\n              \"name\": \"Nightlife\"\n            },\n            {\n              \"id\": \"it_2339\",\n              \"name\": \"Online shopping\"\n            },\n            {\n              \"id\": \"it_1005\",\n              \"name\": \"Sailing\"\n            },\n            {\n              \"id\": \"it_2215\",\n              \"name\": \"Bassist\"\n            },\n            {\n              \"id\": \"it_2337\",\n              \"name\": \"Online broker\"\n            },\n            {\n              \"id\": \"it_94\",\n              \"name\": \"Military\"\n            },\n            {\n              \"id\": \"it_2320\",\n              \"name\": \"Memes\"\n            },\n            {\n              \"id\": \"it_2202\",\n              \"name\": \"Among Us\"\n            },\n            {\n              \"id\": \"it_2323\",\n              \"name\": \"Motorbike racing\"\n            },\n            {\n              \"id\": \"it_5155\",\n              \"name\": \"Muay Thai\"\n            },\n            {\n              \"id\": \"it_2324\",\n              \"name\": \"Motorcycling\"\n            },\n            {\n              \"id\": \"it_2321\",\n              \"name\": \"Metaverse\"\n            },\n            {\n              \"id\": \"it_2322\",\n              \"name\": \"Mindfulness\"\n            },\n            {\n              \"id\": \"it_2201\",\n              \"name\": \"Acapella\"\n            },\n            {\n              \"id\": \"it_2327\",\n              \"name\": \"Playing a musical instrument\"\n            },\n            {\n              \"id\": \"it_2206\",\n              \"name\": \"Art galleries\"\n            },\n            {\n              \"id\": \"it_2328\",\n              \"name\": \"Writing musicals\"\n            },\n            {\n              \"id\": \"it_88\",\n              \"name\": \"Hiking\"\n            },\n            {\n              \"id\": \"it_2207\",\n              \"name\": \"Artistic gymnastics\"\n            },\n            {\n              \"id\": \"it_2325\",\n              \"name\": \"Mountains\"\n            },\n            {\n              \"id\": \"it_2205\",\n              \"name\": \"Archery\"\n            },\n            {\n              \"id\": \"it_2208\",\n              \"name\": \"Atari\"\n            },\n            {\n              \"id\": \"it_2209\",\n              \"name\": \"Backpacking\"\n            },\n            {\n              \"id\": \"it_86\",\n              \"name\": \"Fishing\"\n            },\n            {\n              \"id\": \"it_2075\",\n              \"name\": \"Clubbing\"\n            },\n            {\n              \"id\": \"it_2079\",\n              \"name\": \"Street food\"\n            },\n            {\n              \"id\": \"it_78\",\n              \"name\": \"Crossfit\"\n            },\n            {\n              \"id\": \"it_76\",\n              \"name\": \"Concerts\"\n            },\n            {\n              \"id\": \"it_75\",\n              \"name\": \"Climbing\"\n            },\n            {\n              \"id\": \"it_70\",\n              \"name\": \"Baking\"\n            },\n            {\n              \"id\": \"it_72\",\n              \"name\": \"Camping\"\n            },\n            {\n              \"id\": \"it_71\",\n              \"name\": \"Blogging\"\n            },\n            {\n              \"id\": \"it_2070\",\n              \"name\": \"Collecting\"\n            },\n            {\n              \"id\": \"it_2072\",\n              \"name\": \"Cars\"\n            },\n            {\n              \"id\": \"it_2066\",\n              \"name\": \"Start-ups\"\n            },\n            {\n              \"id\": \"it_2067\",\n              \"name\": \"Boba tea\"\n            },\n            {\n              \"id\": \"it_2064\",\n              \"name\": \"High-school baseketball league (TW)\"\n            },\n            {\n              \"id\": \"it_2069\",\n              \"name\": \"Badminton\"\n            },\n            {\n              \"id\": \"it_66\",\n              \"name\": \"Active lifestyle\"\n            },\n            {\n              \"id\": \"it_63\",\n              \"name\": \"Fashion\"\n            },\n            {\n              \"id\": \"it_62\",\n              \"name\": \"Anime\"\n            },\n            {\n              \"id\": \"it_2062\",\n              \"name\": \"NBA\"\n            },\n            {\n              \"id\": \"it_2063\",\n              \"name\": \"MLB\"\n            },\n            {\n              \"id\": \"it_2099\",\n              \"name\": \"Funk music\"\n            },\n            {\n              \"id\": \"it_5006\",\n              \"name\": \"Diving\"\n            },\n            {\n              \"id\": \"it_2097\",\n              \"name\": \"Caipirinha\"\n            },\n            {\n              \"id\": \"it_5007\",\n              \"name\": \"American flag football\"\n            },\n            {\n              \"id\": \"it_5008\",\n              \"name\": \"Handball\"\n            },\n            {\n              \"id\": \"it_5001\",\n              \"name\": \"Artistic swimming\"\n            },\n            {\n              \"id\": \"it_5002\",\n              \"name\": \"Athletics\"\n            },\n            {\n              \"id\": \"it_59\",\n              \"name\": \"Indoor activities\"\n            },\n            {\n              \"id\": \"it_5003\",\n              \"name\": \"Softball\"\n            },\n            {\n              \"id\": \"it_5004\",\n              \"name\": \"Beach volleyball\"\n            },\n            {\n              \"id\": \"it_2410\",\n              \"name\": \"Tempeh\"\n            },\n            {\n              \"id\": \"it_56\",\n              \"name\": \"DIY\"\n            },\n            {\n              \"id\": \"it_2416\",\n              \"name\": \"Town festivities\"\n            },\n            {\n              \"id\": \"it_55\",\n              \"name\": \"Cycling\"\n            },\n            {\n              \"id\": \"it_58\",\n              \"name\": \"Outdoors\"\n            },\n            {\n              \"id\": \"it_2414\",\n              \"name\": \"TikTok\"\n            },\n            {\n              \"id\": \"it_57\",\n              \"name\": \"Picnicking\"\n            },\n            {\n              \"id\": \"it_2419\",\n              \"name\": \"Twitch\"\n            },\n            {\n              \"id\": \"it_5009\",\n              \"name\": \"Judo\"\n            },\n            {\n              \"id\": \"it_51\",\n              \"name\": \"Comedy\"\n            },\n            {\n              \"id\": \"it_2417\",\n              \"name\": \"Trap music\"\n            },\n            {\n              \"id\": \"it_54\",\n              \"name\": \"Music\"\n            },\n            {\n              \"id\": \"it_2418\",\n              \"name\": \"Triathlon\"\n            },\n            {\n              \"id\": \"it_53\",\n              \"name\": \"Netflix\"\n            },\n            {\n              \"id\": \"it_50\",\n              \"name\": \"Disney\"\n            },\n            {\n              \"id\": \"it_2090\",\n              \"name\": \"Rugby\"\n            },\n            {\n              \"id\": \"it_2095\",\n              \"name\": \"Açaí\"\n            },\n            {\n              \"id\": \"it_2093\",\n              \"name\": \"Samba\"\n            },\n            {\n              \"id\": \"it_2094\",\n              \"name\": \"Tarot\"\n            },\n            {\n              \"id\": \"it_2400\",\n              \"name\": \"Stock exchange\"\n            },\n            {\n              \"id\": \"it_2401\",\n              \"name\": \"Stocks\"\n            },\n            {\n              \"id\": \"it_48\",\n              \"name\": \"Swimming\"\n            },\n            {\n              \"id\": \"it_2404\",\n              \"name\": \"Table tennis\"\n            },\n            {\n              \"id\": \"it_41\",\n              \"name\": \"Killing time\"\n            },\n            {\n              \"id\": \"it_43\",\n              \"name\": \"Working out\"\n            },\n            {\n              \"id\": \"it_42\",\n              \"name\": \"Yoga\"\n            },\n            {\n              \"id\": \"it_2080\",\n              \"name\": \"Horror films\"\n            },\n            {\n              \"id\": \"it_2081\",\n              \"name\": \"Boxing\"\n            },\n            {\n              \"id\": \"it_2082\",\n              \"name\": \"Chilling at a bar\"\n            }\n          ],\n          \"iconUrl\": \"https://static-assets.gotinder.com/icons/descriptors/language@3x.png\",\n          \"iconUrls\": [\n            {\n              \"url\": \"https://static-assets.gotinder.com/icons/descriptors/language@1x.png\",\n              \"quality\": \"1x\",\n              \"width\": 22,\n              \"height\": 22\n            },\n            {\n              \"url\": \"https://static-assets.gotinder.com/icons/descriptors/language@2x.png\",\n              \"quality\": \"2x\",\n              \"width\": 44,\n              \"height\": 44\n            },\n            {\n              \"url\": \"https://static-assets.gotinder.com/icons/descriptors/language@3x.png\",\n              \"quality\": \"3x\",\n              \"width\": 66,\n              \"height\": 66\n            }\n          ],\n          \"minSelections\": 3,\n          \"maxSelections\": 5,\n          \"backgroundText\": \"Add interests\",\n          \"searchBackgroundText\": \"Search interests\",\n          \"sectionId\": 2,\n          \"sectionName\": \"Interests\",\n          \"matchGroupKey\": \"languages\",\n          \"shouldLocalizeChoices\": true,\n          \"discoveryPreferencesEnabled\": false\n        }\n      ]", new System.Text.Json.JsonDocumentOptions()),
                            DisplayType = "section",
                            Prompt = "Tell us about your interests",
                            SectionName = "Interests"
                        },
                        new
                        {
                            Id = 3,
                            Descriptors = System.Text.Json.JsonDocument.Parse("[\n        {\n          \"id\": \"de_29\",\n          \"name\": \"Looking for\",\n          \"prompt\": \"What are you looking for?\",\n          \"type\": \"choice_selector_v1\",\n          \"choices\": [\n            {\n              \"id\": \"1\",\n              \"name\": \"Long-term partner\",\n              \"style\": \"purple\",\n              \"emoji\": \"💘\",\n              \"iconUrls\": [\n                {\n                  \"url\": \"https://static-assets.gotinder.com/icons/descriptors/relationship_intent_cupid@1x.png\",\n                  \"quality\": \"1x\",\n                  \"width\": 50,\n                  \"height\": 50\n                },\n                {\n                  \"url\": \"https://static-assets.gotinder.com/icons/descriptors/relationship_intent_cupid@2x.png\",\n                  \"quality\": \"2x\",\n                  \"width\": 100,\n                  \"height\": 100\n                },\n                {\n                  \"url\": \"https://static-assets.gotinder.com/icons/descriptors/relationship_intent_cupid@3x.png\",\n                  \"quality\": \"3x\",\n                  \"width\": 150,\n                  \"height\": 150\n                }\n              ],\n              \"matchGroupKey\": \"Serious\"\n            },\n            {\n              \"id\": \"2\",\n              \"name\": \"Long-term, but short-term OK\",\n              \"style\": \"pink\",\n              \"emoji\": \"😍\",\n              \"iconUrls\": [\n                {\n                  \"url\": \"https://static-assets.gotinder.com/icons/descriptors/relationship_intent_heart_eyes@1x.png\",\n                  \"quality\": \"1x\",\n                  \"width\": 50,\n                  \"height\": 50\n                },\n                {\n                  \"url\": \"https://static-assets.gotinder.com/icons/descriptors/relationship_intent_heart_eyes@2x.png\",\n                  \"quality\": \"2x\",\n                  \"width\": 100,\n                  \"height\": 100\n                },\n                {\n                  \"url\": \"https://static-assets.gotinder.com/icons/descriptors/relationship_intent_heart_eyes@3x.png\",\n                  \"quality\": \"3x\",\n                  \"width\": 150,\n                  \"height\": 150\n                }\n              ]\n            },\n            {\n              \"id\": \"3\",\n              \"name\": \"Short-term, but long-term OK\",\n              \"style\": \"yellow\",\n              \"emoji\": \"🥂\",\n              \"iconUrls\": [\n                {\n                  \"url\": \"https://static-assets.gotinder.com/icons/descriptors/relationship_intent_clinking_glasses@1x.png\",\n                  \"quality\": \"1x\",\n                  \"width\": 50,\n                  \"height\": 50\n                },\n                {\n                  \"url\": \"https://static-assets.gotinder.com/icons/descriptors/relationship_intent_clinking_glasses@2x.png\",\n                  \"quality\": \"2x\",\n                  \"width\": 100,\n                  \"height\": 100\n                },\n                {\n                  \"url\": \"https://static-assets.gotinder.com/icons/descriptors/relationship_intent_clinking_glasses@3x.png\",\n                  \"quality\": \"3x\",\n                  \"width\": 150,\n                  \"height\": 150\n                }\n              ]\n            },\n            {\n              \"id\": \"4\",\n              \"name\": \"Short-term fun\",\n              \"style\": \"green\",\n              \"emoji\": \"🎉\",\n              \"iconUrls\": [\n                {\n                  \"url\": \"https://static-assets.gotinder.com/icons/descriptors/relationship_intent_tada@1x.png\",\n                  \"quality\": \"1x\",\n                  \"width\": 50,\n                  \"height\": 50\n                },\n                {\n                  \"url\": \"https://static-assets.gotinder.com/icons/descriptors/relationship_intent_tada@2x.png\",\n                  \"quality\": \"2x\",\n                  \"width\": 100,\n                  \"height\": 100\n                },\n                {\n                  \"url\": \"https://static-assets.gotinder.com/icons/descriptors/relationship_intent_tada@3x.png\",\n                  \"quality\": \"3x\",\n                  \"width\": 150,\n                  \"height\": 150\n                }\n              ],\n              \"matchGroupKey\": \"Casual\"\n            },\n            {\n              \"id\": \"5\",\n              \"name\": \"New friends\",\n              \"style\": \"teal\",\n              \"emoji\": \"👋\",\n              \"iconUrls\": [\n                {\n                  \"url\": \"https://static-assets.gotinder.com/icons/descriptors/relationship_intent_wave@1x.png\",\n                  \"quality\": \"1x\",\n                  \"width\": 50,\n                  \"height\": 50\n                },\n                {\n                  \"url\": \"https://static-assets.gotinder.com/icons/descriptors/relationship_intent_wave@2x.png\",\n                  \"quality\": \"2x\",\n                  \"width\": 100,\n                  \"height\": 100\n                },\n                {\n                  \"url\": \"https://static-assets.gotinder.com/icons/descriptors/relationship_intent_wave@3x.png\",\n                  \"quality\": \"3x\",\n                  \"width\": 150,\n                  \"height\": 150\n                }\n              ],\n              \"matchGroupKey\": \"Friends\"\n            },\n            {\n              \"id\": \"6\",\n              \"name\": \"Still figuring it out\",\n              \"style\": \"blue\",\n              \"emoji\": \"🤔\",\n              \"iconUrls\": [\n                {\n                  \"url\": \"https://static-assets.gotinder.com/icons/descriptors/relationship_intent_thinking_face@1x.png\",\n                  \"quality\": \"1x\",\n                  \"width\": 50,\n                  \"height\": 50\n                },\n                {\n                  \"url\": \"https://static-assets.gotinder.com/icons/descriptors/relationship_intent_thinking_face@2x.png\",\n                  \"quality\": \"2x\",\n                  \"width\": 100,\n                  \"height\": 100\n                },\n                {\n                  \"url\": \"https://static-assets.gotinder.com/icons/descriptors/relationship_intent_thinking_face@3x.png\",\n                  \"quality\": \"3x\",\n                  \"width\": 150,\n                  \"height\": 150\n                }\n              ],\n              \"matchGroupKey\": \"DontKnow\"\n            }\n          ],\n          \"iconUrl\": \"https://static-assets.gotinder.com/icons/descriptors/looking_for@3x.png\",\n          \"iconUrls\": [\n            {\n              \"url\": \"https://static-assets.gotinder.com/icons/descriptors/looking_for@1x.png\",\n              \"quality\": \"1x\",\n              \"width\": 22,\n              \"height\": 22\n            },\n            {\n              \"url\": \"https://static-assets.gotinder.com/icons/descriptors/looking_for@2x.png\",\n              \"quality\": \"2x\",\n              \"width\": 44,\n              \"height\": 44\n            },\n            {\n              \"url\": \"https://static-assets.gotinder.com/icons/descriptors/looking_for@3x.png\",\n              \"quality\": \"3x\",\n              \"width\": 66,\n              \"height\": 66\n            }\n          ],\n          \"subPrompt\": \"All good if it changes. There’s something for everyone.\",\n          \"sectionId\": 3,\n          \"sectionName\": \"Relationship Goals\",\n          \"matchGroupKey\": \"intent\",\n          \"shouldLocalizeChoices\": true,\n          \"discoveryPreferencesEnabled\": true\n        }\n      ]", new System.Text.Json.JsonDocumentOptions()),
                            DisplayType = "section",
                            SectionName = "Relationship Goals"
                        },
                        new
                        {
                            Id = 4,
                            Descriptors = System.Text.Json.JsonDocument.Parse("[\n        {\n          \"id\": \"de_37\",\n          \"type\": \"multiSelectionSet\",\n          \"choices\": [\n            {\n              \"id\": \"1\",\n              \"name\": \"Afrikaans\"\n            },\n            {\n              \"id\": \"2\",\n              \"name\": \"Albanian\"\n            },\n            {\n              \"id\": \"3\",\n              \"name\": \"Amharic\"\n            },\n            {\n              \"id\": \"4\",\n              \"name\": \"Arabic\",\n              \"matchGroupKey\": \"Arabic\"\n            },\n            {\n              \"id\": \"5\",\n              \"name\": \"Armenian\",\n              \"matchGroupKey\": \"Armenian\"\n            },\n            {\n              \"id\": \"133\",\n              \"name\": \"ASL\"\n            },\n            {\n              \"id\": \"6\",\n              \"name\": \"Assamese\"\n            },\n            {\n              \"id\": \"7\",\n              \"name\": \"Aymara\"\n            },\n            {\n              \"id\": \"8\",\n              \"name\": \"Azerbaijani\"\n            },\n            {\n              \"id\": \"9\",\n              \"name\": \"Bambara\"\n            },\n            {\n              \"id\": \"10\",\n              \"name\": \"Basque\"\n            },\n            {\n              \"id\": \"11\",\n              \"name\": \"Belarusian\"\n            },\n            {\n              \"id\": \"12\",\n              \"name\": \"Bengali\",\n              \"matchGroupKey\": \"Bengali\"\n            },\n            {\n              \"id\": \"13\",\n              \"name\": \"Bhojpuri\"\n            },\n            {\n              \"id\": \"14\",\n              \"name\": \"Bosnian\"\n            },\n            {\n              \"id\": \"134\",\n              \"name\": \"Breton\"\n            },\n            {\n              \"id\": \"15\",\n              \"name\": \"Bulgarian\",\n              \"matchGroupKey\": \"Bulgarian\"\n            },\n            {\n              \"id\": \"16\",\n              \"name\": \"Burmese\"\n            },\n            {\n              \"id\": \"17\",\n              \"name\": \"Cantonese\",\n              \"matchGroupKey\": \"Cantonese\"\n            },\n            {\n              \"id\": \"18\",\n              \"name\": \"Catalan\"\n            },\n            {\n              \"id\": \"19\",\n              \"name\": \"Cebuano\"\n            },\n            {\n              \"id\": \"20\",\n              \"name\": \"Chichewa\"\n            },\n            {\n              \"id\": \"21\",\n              \"name\": \"Corsican\"\n            },\n            {\n              \"id\": \"22\",\n              \"name\": \"Croatian\"\n            },\n            {\n              \"id\": \"23\",\n              \"name\": \"Czech\",\n              \"matchGroupKey\": \"Czech\"\n            },\n            {\n              \"id\": \"24\",\n              \"name\": \"Danish\",\n              \"matchGroupKey\": \"Danish\"\n            },\n            {\n              \"id\": \"25\",\n              \"name\": \"Dhivehi\"\n            },\n            {\n              \"id\": \"26\",\n              \"name\": \"Dogri\"\n            },\n            {\n              \"id\": \"27\",\n              \"name\": \"Dutch\",\n              \"matchGroupKey\": \"Dutch\"\n            },\n            {\n              \"id\": \"28\",\n              \"name\": \"English\",\n              \"matchGroupKey\": \"English\"\n            },\n            {\n              \"id\": \"29\",\n              \"name\": \"Esperanto\"\n            },\n            {\n              \"id\": \"30\",\n              \"name\": \"Estonian\"\n            },\n            {\n              \"id\": \"31\",\n              \"name\": \"Ewe\"\n            },\n            {\n              \"id\": \"32\",\n              \"name\": \"Filipino\"\n            },\n            {\n              \"id\": \"33\",\n              \"name\": \"Finnish\",\n              \"matchGroupKey\": \"Finnish\"\n            },\n            {\n              \"id\": \"34\",\n              \"name\": \"French\",\n              \"matchGroupKey\": \"French\"\n            },\n            {\n              \"id\": \"35\",\n              \"name\": \"Frisian\"\n            },\n            {\n              \"id\": \"36\",\n              \"name\": \"Galician\"\n            },\n            {\n              \"id\": \"37\",\n              \"name\": \"Georgian\"\n            },\n            {\n              \"id\": \"38\",\n              \"name\": \"German\",\n              \"matchGroupKey\": \"German\"\n            },\n            {\n              \"id\": \"39\",\n              \"name\": \"Greek\",\n              \"matchGroupKey\": \"Greek\"\n            },\n            {\n              \"id\": \"40\",\n              \"name\": \"Guaraní\"\n            },\n            {\n              \"id\": \"41\",\n              \"name\": \"Gujarati\",\n              \"matchGroupKey\": \"Gujarati\"\n            },\n            {\n              \"id\": \"42\",\n              \"name\": \"Haitian Creole\"\n            },\n            {\n              \"id\": \"43\",\n              \"name\": \"Hausa\"\n            },\n            {\n              \"id\": \"44\",\n              \"name\": \"Hawaiian\"\n            },\n            {\n              \"id\": \"45\",\n              \"name\": \"Hebrew\",\n              \"matchGroupKey\": \"Hebrew\"\n            },\n            {\n              \"id\": \"46\",\n              \"name\": \"Hindi\",\n              \"matchGroupKey\": \"Hindi\"\n            },\n            {\n              \"id\": \"47\",\n              \"name\": \"Hmong\"\n            },\n            {\n              \"id\": \"48\",\n              \"name\": \"Hungarian\",\n              \"matchGroupKey\": \"Hungarian\"\n            },\n            {\n              \"id\": \"49\",\n              \"name\": \"Icelandic\"\n            },\n            {\n              \"id\": \"50\",\n              \"name\": \"Igbo\"\n            },\n            {\n              \"id\": \"51\",\n              \"name\": \"Ilocano\"\n            },\n            {\n              \"id\": \"52\",\n              \"name\": \"Indonesian\",\n              \"matchGroupKey\": \"Indonesian\"\n            },\n            {\n              \"id\": \"53\",\n              \"name\": \"Irish\",\n              \"matchGroupKey\": \"Irish\"\n            },\n            {\n              \"id\": \"54\",\n              \"name\": \"Italian\",\n              \"matchGroupKey\": \"Italian\"\n            },\n            {\n              \"id\": \"55\",\n              \"name\": \"Japanese\",\n              \"matchGroupKey\": \"Japanese\"\n            },\n            {\n              \"id\": \"56\",\n              \"name\": \"Javanese\"\n            },\n            {\n              \"id\": \"57\",\n              \"name\": \"Kannada\"\n            },\n            {\n              \"id\": \"58\",\n              \"name\": \"Kazakh\"\n            },\n            {\n              \"id\": \"59\",\n              \"name\": \"Khmer\",\n              \"matchGroupKey\": \"Khmer\"\n            },\n            {\n              \"id\": \"60\",\n              \"name\": \"Kinyarwanda\"\n            },\n            {\n              \"id\": \"61\",\n              \"name\": \"Konkani\"\n            },\n            {\n              \"id\": \"62\",\n              \"name\": \"Korean\",\n              \"matchGroupKey\": \"Korean\"\n            },\n            {\n              \"id\": \"63\",\n              \"name\": \"Krio\"\n            },\n            {\n              \"id\": \"64\",\n              \"name\": \"Kurdish\"\n            },\n            {\n              \"id\": \"65\",\n              \"name\": \"Kyrgyz\"\n            },\n            {\n              \"id\": \"66\",\n              \"name\": \"Lao\"\n            },\n            {\n              \"id\": \"67\",\n              \"name\": \"Latin\"\n            },\n            {\n              \"id\": \"68\",\n              \"name\": \"Latvian\",\n              \"matchGroupKey\": \"Latvian\"\n            },\n            {\n              \"id\": \"69\",\n              \"name\": \"Lingala\"\n            },\n            {\n              \"id\": \"70\",\n              \"name\": \"Lithuanian\",\n              \"matchGroupKey\": \"Lithuanian\"\n            },\n            {\n              \"id\": \"71\",\n              \"name\": \"Luganda\"\n            },\n            {\n              \"id\": \"72\",\n              \"name\": \"Luxembourgish\"\n            },\n            {\n              \"id\": \"73\",\n              \"name\": \"Macedonian\"\n            },\n            {\n              \"id\": \"74\",\n              \"name\": \"Maithili\"\n            },\n            {\n              \"id\": \"75\",\n              \"name\": \"Malagasy\"\n            },\n            {\n              \"id\": \"76\",\n              \"name\": \"Malay\",\n              \"matchGroupKey\": \"Malay\"\n            },\n            {\n              \"id\": \"77\",\n              \"name\": \"Malayalam\"\n            },\n            {\n              \"id\": \"78\",\n              \"name\": \"Maltese\"\n            },\n            {\n              \"id\": \"79\",\n              \"name\": \"Mandarin Chinese\",\n              \"matchGroupKey\": \"Chinese\"\n            },\n            {\n              \"id\": \"80\",\n              \"name\": \"Manipuri\"\n            },\n            {\n              \"id\": \"81\",\n              \"name\": \"Maori\"\n            },\n            {\n              \"id\": \"82\",\n              \"name\": \"Marathi\"\n            },\n            {\n              \"id\": \"83\",\n              \"name\": \"Mizo\"\n            },\n            {\n              \"id\": \"84\",\n              \"name\": \"Mongolian\"\n            },\n            {\n              \"id\": \"85\",\n              \"name\": \"Nepali\"\n            },\n            {\n              \"id\": \"86\",\n              \"name\": \"Norwegian\",\n              \"matchGroupKey\": \"Norwegian\"\n            },\n            {\n              \"id\": \"87\",\n              \"name\": \"Odia\"\n            },\n            {\n              \"id\": \"88\",\n              \"name\": \"Oromo\"\n            },\n            {\n              \"id\": \"89\",\n              \"name\": \"Pashto\"\n            },\n            {\n              \"id\": \"90\",\n              \"name\": \"Persian\",\n              \"matchGroupKey\": \"Persian\"\n            },\n            {\n              \"id\": \"91\",\n              \"name\": \"Polish\",\n              \"matchGroupKey\": \"Polish\"\n            },\n            {\n              \"id\": \"92\",\n              \"name\": \"Portuguese\",\n              \"matchGroupKey\": \"Portuguese\"\n            },\n            {\n              \"id\": \"93\",\n              \"name\": \"Punjabi\",\n              \"matchGroupKey\": \"Punjabi\"\n            },\n            {\n              \"id\": \"94\",\n              \"name\": \"Quechua\"\n            },\n            {\n              \"id\": \"95\",\n              \"name\": \"Romanian\",\n              \"matchGroupKey\": \"Romanian\"\n            },\n            {\n              \"id\": \"96\",\n              \"name\": \"Russian\",\n              \"matchGroupKey\": \"Russian\"\n            },\n            {\n              \"id\": \"97\",\n              \"name\": \"Samoan\"\n            },\n            {\n              \"id\": \"98\",\n              \"name\": \"Sanskrit\"\n            },\n            {\n              \"id\": \"99\",\n              \"name\": \"Scots Gaelic\"\n            },\n            {\n              \"id\": \"100\",\n              \"name\": \"Sepedi\"\n            },\n            {\n              \"id\": \"101\",\n              \"name\": \"Serbian\"\n            },\n            {\n              \"id\": \"102\",\n              \"name\": \"Sesotho\"\n            },\n            {\n              \"id\": \"103\",\n              \"name\": \"Shona\"\n            },\n            {\n              \"id\": \"104\",\n              \"name\": \"Sindhi\"\n            },\n            {\n              \"id\": \"105\",\n              \"name\": \"Sinhala\"\n            },\n            {\n              \"id\": \"106\",\n              \"name\": \"Slovak\",\n              \"matchGroupKey\": \"Slovak\"\n            },\n            {\n              \"id\": \"107\",\n              \"name\": \"Slovenian\",\n              \"matchGroupKey\": \"Slovenian\"\n            },\n            {\n              \"id\": \"108\",\n              \"name\": \"Somali\"\n            },\n            {\n              \"id\": \"109\",\n              \"name\": \"Spanish\",\n              \"matchGroupKey\": \"Spanish\"\n            },\n            {\n              \"id\": \"110\",\n              \"name\": \"Sundanese\"\n            },\n            {\n              \"id\": \"111\",\n              \"name\": \"Swahili\",\n              \"matchGroupKey\": \"Swahili\"\n            },\n            {\n              \"id\": \"112\",\n              \"name\": \"Swedish\",\n              \"matchGroupKey\": \"Swedish\"\n            },\n            {\n              \"id\": \"113\",\n              \"name\": \"Tajik\"\n            },\n            {\n              \"id\": \"114\",\n              \"name\": \"Tamil\",\n              \"matchGroupKey\": \"Tamil\"\n            },\n            {\n              \"id\": \"115\",\n              \"name\": \"Tatar\"\n            },\n            {\n              \"id\": \"116\",\n              \"name\": \"Telugu\"\n            },\n            {\n              \"id\": \"117\",\n              \"name\": \"Thai\",\n              \"matchGroupKey\": \"Thai\"\n            },\n            {\n              \"id\": \"118\",\n              \"name\": \"Tigrinya\"\n            },\n            {\n              \"id\": \"119\",\n              \"name\": \"Tsonga\"\n            },\n            {\n              \"id\": \"120\",\n              \"name\": \"Turkish\",\n              \"matchGroupKey\": \"Turkish\"\n            },\n            {\n              \"id\": \"121\",\n              \"name\": \"Turkmen\"\n            },\n            {\n              \"id\": \"122\",\n              \"name\": \"Twi\"\n            },\n            {\n              \"id\": \"123\",\n              \"name\": \"Ukrainian\",\n              \"matchGroupKey\": \"Ukranian\"\n            },\n            {\n              \"id\": \"124\",\n              \"name\": \"Urdu\",\n              \"matchGroupKey\": \"Urdu\"\n            },\n            {\n              \"id\": \"125\",\n              \"name\": \"Uyghur\"\n            },\n            {\n              \"id\": \"126\",\n              \"name\": \"Uzbek\"\n            },\n            {\n              \"id\": \"127\",\n              \"name\": \"Vietnamese\",\n              \"matchGroupKey\": \"Vietnamese\"\n            },\n            {\n              \"id\": \"128\",\n              \"name\": \"Welsh\"\n            },\n            {\n              \"id\": \"129\",\n              \"name\": \"Xhosa\"\n            },\n            {\n              \"id\": \"130\",\n              \"name\": \"Yiddish\"\n            },\n            {\n              \"id\": \"131\",\n              \"name\": \"Yoruba\"\n            },\n            {\n              \"id\": \"132\",\n              \"name\": \"Zulu\"\n            }\n          ],\n          \"iconUrl\": \"https://static-assets.gotinder.com/icons/descriptors/language@3x.png\",\n          \"iconUrls\": [\n            {\n              \"url\": \"https://static-assets.gotinder.com/icons/descriptors/language@1x.png\",\n              \"quality\": \"1x\",\n              \"width\": 22,\n              \"height\": 22\n            },\n            {\n              \"url\": \"https://static-assets.gotinder.com/icons/descriptors/language@2x.png\",\n              \"quality\": \"2x\",\n              \"width\": 44,\n              \"height\": 44\n            },\n            {\n              \"url\": \"https://static-assets.gotinder.com/icons/descriptors/language@3x.png\",\n              \"quality\": \"3x\",\n              \"width\": 66,\n              \"height\": 66\n            }\n          ],\n          \"minSelections\": 1,\n          \"maxSelections\": 5,\n          \"backgroundText\": \"Add languages\",\n          \"searchBackgroundText\": \"Search languages\",\n          \"sectionId\": 4,\n          \"sectionName\": \"Languages I know\",\n          \"matchGroupKey\": \"languages\",\n          \"shouldLocalizeChoices\": true,\n          \"discoveryPreferencesEnabled\": false\n        }\n      ]", new System.Text.Json.JsonDocumentOptions()),
                            DisplayType = "section",
                            Prompt = "Select up to 5 languages you know and add them to your profile",
                            SectionName = "Languages I know"
                        },
                        new
                        {
                            Id = 5,
                            Descriptors = System.Text.Json.JsonDocument.Parse("[\n        {\n          \"id\": \"de_1\",\n          \"name\": \"Zodiac\",\n          \"prompt\": \"What’s your star sign?\",\n          \"type\": \"single_selection_set\",\n          \"choices\": [\n            {\n              \"id\": \"1\",\n              \"name\": \"Capricorn\"\n            },\n            {\n              \"id\": \"2\",\n              \"name\": \"Aquarius\"\n            },\n            {\n              \"id\": \"3\",\n              \"name\": \"Pisces\"\n            },\n            {\n              \"id\": \"4\",\n              \"name\": \"Aries\"\n            },\n            {\n              \"id\": \"5\",\n              \"name\": \"Taurus\"\n            },\n            {\n              \"id\": \"6\",\n              \"name\": \"Gemini\"\n            },\n            {\n              \"id\": \"7\",\n              \"name\": \"Cancer\"\n            },\n            {\n              \"id\": \"8\",\n              \"name\": \"Leo\"\n            },\n            {\n              \"id\": \"9\",\n              \"name\": \"Virgo\"\n            },\n            {\n              \"id\": \"10\",\n              \"name\": \"Libra\"\n            },\n            {\n              \"id\": \"11\",\n              \"name\": \"Scorpio\"\n            },\n            {\n              \"id\": \"12\",\n              \"name\": \"Sagittarius\"\n            }\n          ],\n          \"iconUrl\": \"https://static-assets.gotinder.com/icons/descriptors/astrological_sign@3x.png\",\n          \"iconUrls\": [\n            {\n              \"url\": \"https://static-assets.gotinder.com/icons/descriptors/astrological_sign@1x.png\",\n              \"quality\": \"1x\",\n              \"width\": 22,\n              \"height\": 22\n            },\n            {\n              \"url\": \"https://static-assets.gotinder.com/icons/descriptors/astrological_sign@2x.png\",\n              \"quality\": \"2x\",\n              \"width\": 44,\n              \"height\": 44\n            },\n            {\n              \"url\": \"https://static-assets.gotinder.com/icons/descriptors/astrological_sign@3x.png\",\n              \"quality\": \"3x\",\n              \"width\": 66,\n              \"height\": 66\n            }\n          ],\n          \"sectionId\": 5,\n          \"sectionName\": \"More about me\",\n          \"shouldLocalizeChoices\": true,\n          \"discoveryPreferencesEnabled\": true\n        },\n        {\n          \"id\": \"de_9\",\n          \"name\": \"Education\",\n          \"prompt\": \"What is your education level?\",\n          \"type\": \"single_selection_set\",\n          \"choices\": [\n            {\n              \"id\": \"1\",\n              \"name\": \"Bachelor degree\",\n              \"matchGroupKey\": \"Bachelors\"\n            },\n            {\n              \"id\": \"2\",\n              \"name\": \"At uni\"\n            },\n            {\n              \"id\": \"3\",\n              \"name\": \"High school\",\n              \"matchGroupKey\": \"Highschool\"\n            },\n            {\n              \"id\": \"4\",\n              \"name\": \"PhD\",\n              \"matchGroupKey\": \"PhD\"\n            },\n            {\n              \"id\": \"5\",\n              \"name\": \"On a graduate programme\"\n            },\n            {\n              \"id\": \"6\",\n              \"name\": \"Master degree\",\n              \"matchGroupKey\": \"Masters\"\n            },\n            {\n              \"id\": \"7\",\n              \"name\": \"Trade school\"\n            }\n          ],\n          \"iconUrl\": \"https://static-assets.gotinder.com/icons/descriptors/education@3x.png\",\n          \"iconUrls\": [\n            {\n              \"url\": \"https://static-assets.gotinder.com/icons/descriptors/education@1x.png\",\n              \"quality\": \"1x\",\n              \"width\": 22,\n              \"height\": 22\n            },\n            {\n              \"url\": \"https://static-assets.gotinder.com/icons/descriptors/education@2x.png\",\n              \"quality\": \"2x\",\n              \"width\": 44,\n              \"height\": 44\n            },\n            {\n              \"url\": \"https://static-assets.gotinder.com/icons/descriptors/education@3x.png\",\n              \"quality\": \"3x\",\n              \"width\": 66,\n              \"height\": 66\n            }\n          ],\n          \"sectionId\": 5,\n          \"sectionName\": \"More about me\",\n          \"matchGroupKey\": \"education\",\n          \"shouldLocalizeChoices\": true,\n          \"discoveryPreferencesEnabled\": true\n        },\n        {\n          \"id\": \"de_33\",\n          \"name\": \"Family plans\",\n          \"prompt\": \"Do you want children?\",\n          \"type\": \"single_selection_set\",\n          \"choices\": [\n            {\n              \"id\": \"1\",\n              \"name\": \"I want children\",\n              \"matchGroupKey\": \"Yes\"\n            },\n            {\n              \"id\": \"2\",\n              \"name\": \"I don’t want children\",\n              \"matchGroupKey\": \"No\"\n            },\n            {\n              \"id\": \"3\",\n              \"name\": \"I have children and want more\"\n            },\n            {\n              \"id\": \"4\",\n              \"name\": \"I have children and don’t want more\"\n            },\n            {\n              \"id\": \"5\",\n              \"name\": \"Not sure yet\",\n              \"matchGroupKey\": \"Maybe\"\n            }\n          ],\n          \"iconUrl\": \"https://static-assets.gotinder.com/icons/descriptors/kids@3x.png\",\n          \"iconUrls\": [\n            {\n              \"url\": \"https://static-assets.gotinder.com/icons/descriptors/kids@1x.png\",\n              \"quality\": \"1x\",\n              \"width\": 22,\n              \"height\": 22\n            },\n            {\n              \"url\": \"https://static-assets.gotinder.com/icons/descriptors/kids@2x.png\",\n              \"quality\": \"2x\",\n              \"width\": 44,\n              \"height\": 44\n            },\n            {\n              \"url\": \"https://static-assets.gotinder.com/icons/descriptors/kids@3x.png\",\n              \"quality\": \"3x\",\n              \"width\": 66,\n              \"height\": 66\n            }\n          ],\n          \"sectionId\": 5,\n          \"sectionName\": \"More about me\",\n          \"matchGroupKey\": \"wants_children\",\n          \"shouldLocalizeChoices\": true,\n          \"discoveryPreferencesEnabled\": true\n        },\n        {\n          \"id\": \"de_34\",\n          \"name\": \"COVID vaccine\",\n          \"prompt\": \"Are you vaccinated?\",\n          \"type\": \"single_selection_set\",\n          \"choices\": [\n            {\n              \"id\": \"1\",\n              \"name\": \"Vaccinated\"\n            },\n            {\n              \"id\": \"2\",\n              \"name\": \"Unvaccinated\"\n            },\n            {\n              \"id\": \"3\",\n              \"name\": \"Prefer not to say\"\n            }\n          ],\n          \"iconUrl\": \"https://static-assets.gotinder.com/icons/descriptors/covid_comfort@3x.png\",\n          \"iconUrls\": [\n            {\n              \"url\": \"https://static-assets.gotinder.com/icons/descriptors/covid_comfort@1x.png\",\n              \"quality\": \"1x\",\n              \"width\": 22,\n              \"height\": 22\n            },\n            {\n              \"url\": \"https://static-assets.gotinder.com/icons/descriptors/covid_comfort@2x.png\",\n              \"quality\": \"2x\",\n              \"width\": 44,\n              \"height\": 44\n            },\n            {\n              \"url\": \"https://static-assets.gotinder.com/icons/descriptors/covid_comfort@3x.png\",\n              \"quality\": \"3x\",\n              \"width\": 66,\n              \"height\": 66\n            }\n          ],\n          \"sectionId\": 5,\n          \"sectionName\": \"More about me\",\n          \"shouldLocalizeChoices\": true,\n          \"discoveryPreferencesEnabled\": true\n        },\n        {\n          \"id\": \"de_13\",\n          \"name\": \"Personality type\",\n          \"prompt\": \"What’s your personality type?\",\n          \"type\": \"single_selection_set\",\n          \"choices\": [\n            {\n              \"id\": \"1\",\n              \"name\": \"INTJ\"\n            },\n            {\n              \"id\": \"2\",\n              \"name\": \"INTP\"\n            },\n            {\n              \"id\": \"3\",\n              \"name\": \"ENTJ\"\n            },\n            {\n              \"id\": \"4\",\n              \"name\": \"ENTP\"\n            },\n            {\n              \"id\": \"5\",\n              \"name\": \"INFJ\"\n            },\n            {\n              \"id\": \"6\",\n              \"name\": \"INFP\"\n            },\n            {\n              \"id\": \"7\",\n              \"name\": \"ENFJ\"\n            },\n            {\n              \"id\": \"8\",\n              \"name\": \"ENFP\"\n            },\n            {\n              \"id\": \"9\",\n              \"name\": \"ISTJ\"\n            },\n            {\n              \"id\": \"10\",\n              \"name\": \"ISFJ\"\n            },\n            {\n              \"id\": \"11\",\n              \"name\": \"ESTJ\"\n            },\n            {\n              \"id\": \"12\",\n              \"name\": \"ESFJ\"\n            },\n            {\n              \"id\": \"13\",\n              \"name\": \"ISTP\"\n            },\n            {\n              \"id\": \"14\",\n              \"name\": \"ISFP\"\n            },\n            {\n              \"id\": \"15\",\n              \"name\": \"ESTP\"\n            },\n            {\n              \"id\": \"16\",\n              \"name\": \"ESFP\"\n            }\n          ],\n          \"iconUrl\": \"https://static-assets.gotinder.com/icons/descriptors/mbti@3x.png\",\n          \"iconUrls\": [\n            {\n              \"url\": \"https://static-assets.gotinder.com/icons/descriptors/mbti@1x.png\",\n              \"quality\": \"1x\",\n              \"width\": 22,\n              \"height\": 22\n            },\n            {\n              \"url\": \"https://static-assets.gotinder.com/icons/descriptors/mbti@2x.png\",\n              \"quality\": \"2x\",\n              \"width\": 44,\n              \"height\": 44\n            },\n            {\n              \"url\": \"https://static-assets.gotinder.com/icons/descriptors/mbti@3x.png\",\n              \"quality\": \"3x\",\n              \"width\": 66,\n              \"height\": 66\n            }\n          ],\n          \"sectionId\": 5,\n          \"sectionName\": \"More about me\",\n          \"shouldLocalizeChoices\": true,\n          \"discoveryPreferencesEnabled\": true\n        },\n        {\n          \"id\": \"de_2\",\n          \"name\": \"Communication style\",\n          \"prompt\": \"What’s your communication style?\",\n          \"type\": \"single_selection_set\",\n          \"choices\": [\n            {\n              \"id\": \"1\",\n              \"name\": \"Big time texter\"\n            },\n            {\n              \"id\": \"3\",\n              \"name\": \"Phone caller\"\n            },\n            {\n              \"id\": \"2\",\n              \"name\": \"Video chatter\"\n            },\n            {\n              \"id\": \"4\",\n              \"name\": \"Bad texter\"\n            },\n            {\n              \"id\": \"5\",\n              \"name\": \"Better in person\"\n            }\n          ],\n          \"iconUrl\": \"https://static-assets.gotinder.com/icons/descriptors/communication_style@3x.png\",\n          \"iconUrls\": [\n            {\n              \"url\": \"https://static-assets.gotinder.com/icons/descriptors/communication_style@1x.png\",\n              \"quality\": \"1x\",\n              \"width\": 22,\n              \"height\": 22\n            },\n            {\n              \"url\": \"https://static-assets.gotinder.com/icons/descriptors/communication_style@2x.png\",\n              \"quality\": \"2x\",\n              \"width\": 44,\n              \"height\": 44\n            },\n            {\n              \"url\": \"https://static-assets.gotinder.com/icons/descriptors/communication_style@3x.png\",\n              \"quality\": \"3x\",\n              \"width\": 66,\n              \"height\": 66\n            }\n          ],\n          \"sectionId\": 5,\n          \"sectionName\": \"More about me\",\n          \"shouldLocalizeChoices\": true,\n          \"discoveryPreferencesEnabled\": true\n        },\n        {\n          \"id\": \"de_35\",\n          \"name\": \"Love style\",\n          \"prompt\": \"How do you receive love?\",\n          \"type\": \"single_selection_set\",\n          \"choices\": [\n            {\n              \"id\": \"1\",\n              \"name\": \"Thoughtful gestures\"\n            },\n            {\n              \"id\": \"2\",\n              \"name\": \"Presents\"\n            },\n            {\n              \"id\": \"3\",\n              \"name\": \"Touch\"\n            },\n            {\n              \"id\": \"4\",\n              \"name\": \"Compliments\"\n            },\n            {\n              \"id\": \"5\",\n              \"name\": \"Time together\"\n            }\n          ],\n          \"iconUrl\": \"https://static-assets.gotinder.com/icons/descriptors/love_language@3x.png\",\n          \"iconUrls\": [\n            {\n              \"url\": \"https://static-assets.gotinder.com/icons/descriptors/love_language@1x.png\",\n              \"quality\": \"1x\",\n              \"width\": 22,\n              \"height\": 22\n            },\n            {\n              \"url\": \"https://static-assets.gotinder.com/icons/descriptors/love_language@2x.png\",\n              \"quality\": \"2x\",\n              \"width\": 44,\n              \"height\": 44\n            },\n            {\n              \"url\": \"https://static-assets.gotinder.com/icons/descriptors/love_language@3x.png\",\n              \"quality\": \"3x\",\n              \"width\": 66,\n              \"height\": 66\n            }\n          ],\n          \"sectionId\": 5,\n          \"sectionName\": \"More about me\",\n          \"shouldLocalizeChoices\": true,\n          \"discoveryPreferencesEnabled\": true\n        }\n      ]", new System.Text.Json.JsonDocumentOptions()),
                            DisplayType = "section",
                            Prompt = "Put your best self forward by adding more about you",
                            SectionName = "More about me"
                        },
                        new
                        {
                            Id = 6,
                            Descriptors = System.Text.Json.JsonDocument.Parse("[\n        {\n          \"id\": \"de_3\",\n          \"name\": \"Pets\",\n          \"prompt\": \"Do you have any pets?\",\n          \"type\": \"single_selection_set\",\n          \"choices\": [\n            {\n              \"id\": \"1\",\n              \"name\": \"Dog\",\n              \"matchGroupKey\": \"Dogs\"\n            },\n            {\n              \"id\": \"2\",\n              \"name\": \"Cat\",\n              \"matchGroupKey\": \"Cats\"\n            },\n            {\n              \"id\": \"3\",\n              \"name\": \"Reptile\"\n            },\n            {\n              \"id\": \"4\",\n              \"name\": \"Amphibian\"\n            },\n            {\n              \"id\": \"8\",\n              \"name\": \"Bird\"\n            },\n            {\n              \"id\": \"5\",\n              \"name\": \"Fish\"\n            },\n            {\n              \"id\": \"9\",\n              \"name\": \"Don’t have, but love\"\n            },\n            {\n              \"id\": \"11\",\n              \"name\": \"Other\",\n              \"matchGroupKey\": \"Other\"\n            },\n            {\n              \"id\": \"12\",\n              \"name\": \"Turtle\"\n            },\n            {\n              \"id\": \"13\",\n              \"name\": \"Hamster\"\n            },\n            {\n              \"id\": \"14\",\n              \"name\": \"Rabbit\"\n            },\n            {\n              \"id\": \"6\",\n              \"name\": \"Pet-free\"\n            },\n            {\n              \"id\": \"7\",\n              \"name\": \"All the pets\"\n            },\n            {\n              \"id\": \"16\",\n              \"name\": \"Want a pet\"\n            },\n            {\n              \"id\": \"17\",\n              \"name\": \"Allergic to pets\"\n            }\n          ],\n          \"iconUrl\": \"https://static-assets.gotinder.com/icons/descriptors/pets@3x.png\",\n          \"iconUrls\": [\n            {\n              \"url\": \"https://static-assets.gotinder.com/icons/descriptors/pets@1x.png\",\n              \"quality\": \"1x\",\n              \"width\": 22,\n              \"height\": 22\n            },\n            {\n              \"url\": \"https://static-assets.gotinder.com/icons/descriptors/pets@2x.png\",\n              \"quality\": \"2x\",\n              \"width\": 44,\n              \"height\": 44\n            },\n            {\n              \"url\": \"https://static-assets.gotinder.com/icons/descriptors/pets@3x.png\",\n              \"quality\": \"3x\",\n              \"width\": 66,\n              \"height\": 66\n            }\n          ],\n          \"sectionId\": 6,\n          \"sectionName\": \"Lifestyle\",\n          \"matchGroupKey\": \"pets\",\n          \"shouldLocalizeChoices\": true,\n          \"discoveryPreferencesEnabled\": true\n        },\n        {\n          \"id\": \"de_22\",\n          \"name\": \"Drinking\",\n          \"prompt\": \"How often do you drink?\",\n          \"type\": \"single_selection_set\",\n          \"choices\": [\n            {\n              \"id\": \"8\",\n              \"name\": \"Not for me\",\n              \"matchGroupKey\": \"No\"\n            },\n            {\n              \"id\": \"9\",\n              \"name\": \"Newly teetotal\"\n            },\n            {\n              \"id\": \"10\",\n              \"name\": \"Sober curious\"\n            },\n            {\n              \"id\": \"11\",\n              \"name\": \"On special occasions\",\n              \"matchGroupKey\": \"Sometimes\"\n            },\n            {\n              \"id\": \"12\",\n              \"name\": \"Socially, at the weekend\",\n              \"matchGroupKey\": \"Socially\"\n            },\n            {\n              \"id\": \"13\",\n              \"name\": \"Most nights\",\n              \"matchGroupKey\": \"Yes\"\n            }\n          ],\n          \"iconUrl\": \"https://static-assets.gotinder.com/icons/descriptors/drink_of_choice@3x.png\",\n          \"iconUrls\": [\n            {\n              \"url\": \"https://static-assets.gotinder.com/icons/descriptors/drink_of_choice@1x.png\",\n              \"quality\": \"1x\",\n              \"width\": 22,\n              \"height\": 22\n            },\n            {\n              \"url\": \"https://static-assets.gotinder.com/icons/descriptors/drink_of_choice@2x.png\",\n              \"quality\": \"2x\",\n              \"width\": 44,\n              \"height\": 44\n            },\n            {\n              \"url\": \"https://static-assets.gotinder.com/icons/descriptors/drink_of_choice@3x.png\",\n              \"quality\": \"3x\",\n              \"width\": 66,\n              \"height\": 66\n            }\n          ],\n          \"sectionId\": 6,\n          \"sectionName\": \"Lifestyle\",\n          \"matchGroupKey\": \"drinking\",\n          \"shouldLocalizeChoices\": true,\n          \"discoveryPreferencesEnabled\": true\n        },\n        {\n          \"id\": \"de_11\",\n          \"name\": \"How often do you smoke?\",\n          \"prompt\": \"How often do you smoke?\",\n          \"type\": \"single_selection_set\",\n          \"choices\": [\n            {\n              \"id\": \"1\",\n              \"name\": \"Social smoker\",\n              \"matchGroupKey\": \"Socially\"\n            },\n            {\n              \"id\": \"2\",\n              \"name\": \"Smoker when drinking\"\n            },\n            {\n              \"id\": \"3\",\n              \"name\": \"Non-smoker\",\n              \"matchGroupKey\": \"No\"\n            },\n            {\n              \"id\": \"4\",\n              \"name\": \"Smoker\",\n              \"matchGroupKey\": \"Yes\"\n            },\n            {\n              \"id\": \"6\",\n              \"name\": \"Trying to quit\"\n            }\n          ],\n          \"iconUrl\": \"https://static-assets.gotinder.com/icons/descriptors/smoking@3x.png\",\n          \"iconUrls\": [\n            {\n              \"url\": \"https://static-assets.gotinder.com/icons/descriptors/smoking@1x.png\",\n              \"quality\": \"1x\",\n              \"width\": 22,\n              \"height\": 22\n            },\n            {\n              \"url\": \"https://static-assets.gotinder.com/icons/descriptors/smoking@2x.png\",\n              \"quality\": \"2x\",\n              \"width\": 44,\n              \"height\": 44\n            },\n            {\n              \"url\": \"https://static-assets.gotinder.com/icons/descriptors/smoking@3x.png\",\n              \"quality\": \"3x\",\n              \"width\": 66,\n              \"height\": 66\n            }\n          ],\n          \"sectionId\": 6,\n          \"sectionName\": \"Lifestyle\",\n          \"matchGroupKey\": \"drinking\",\n          \"shouldLocalizeChoices\": true,\n          \"discoveryPreferencesEnabled\": true\n        },\n        {\n          \"id\": \"de_10\",\n          \"name\": \"Workout\",\n          \"prompt\": \"Do you exercise?\",\n          \"type\": \"single_selection_set\",\n          \"choices\": [\n            {\n              \"id\": \"4\",\n              \"name\": \"Every day\"\n            },\n            {\n              \"id\": \"5\",\n              \"name\": \"Often\",\n              \"matchGroupKey\": \"Often\"\n            },\n            {\n              \"id\": \"6\",\n              \"name\": \"Sometimes\",\n              \"matchGroupKey\": \"Sometimes\"\n            },\n            {\n              \"id\": \"3\",\n              \"name\": \"Never\",\n              \"matchGroupKey\": \"Never\"\n            }\n          ],\n          \"iconUrl\": \"https://static-assets.gotinder.com/icons/descriptors/workout@3x.png\",\n          \"iconUrls\": [\n            {\n              \"url\": \"https://static-assets.gotinder.com/icons/descriptors/workout@1x.png\",\n              \"quality\": \"1x\",\n              \"width\": 22,\n              \"height\": 22\n            },\n            {\n              \"url\": \"https://static-assets.gotinder.com/icons/descriptors/workout@2x.png\",\n              \"quality\": \"2x\",\n              \"width\": 44,\n              \"height\": 44\n            },\n            {\n              \"url\": \"https://static-assets.gotinder.com/icons/descriptors/workout@3x.png\",\n              \"quality\": \"3x\",\n              \"width\": 66,\n              \"height\": 66\n            }\n          ],\n          \"sectionId\": 6,\n          \"sectionName\": \"Lifestyle\",\n          \"matchGroupKey\": \"exercise\",\n          \"shouldLocalizeChoices\": true,\n          \"discoveryPreferencesEnabled\": true\n        },\n        {\n          \"id\": \"de_7\",\n          \"name\": \"Dietary preference\",\n          \"prompt\": \"What are your dietary preferences?\",\n          \"type\": \"single_selection_set\",\n          \"choices\": [\n            {\n              \"id\": \"1\",\n              \"name\": \"Vegan\"\n            },\n            {\n              \"id\": \"2\",\n              \"name\": \"Vegetarian\"\n            },\n            {\n              \"id\": \"3\",\n              \"name\": \"Pescatarian\"\n            },\n            {\n              \"id\": \"9\",\n              \"name\": \"Kosher\"\n            },\n            {\n              \"id\": \"10\",\n              \"name\": \"Halal\"\n            },\n            {\n              \"id\": \"7\",\n              \"name\": \"Carnivore\"\n            },\n            {\n              \"id\": \"8\",\n              \"name\": \"Omnivore\"\n            },\n            {\n              \"id\": \"12\",\n              \"name\": \"Other\"\n            }\n          ],\n          \"iconUrl\": \"https://static-assets.gotinder.com/icons/descriptors/appetite@3x.png\",\n          \"iconUrls\": [\n            {\n              \"url\": \"https://static-assets.gotinder.com/icons/descriptors/appetite@1x.png\",\n              \"quality\": \"1x\",\n              \"width\": 22,\n              \"height\": 22\n            },\n            {\n              \"url\": \"https://static-assets.gotinder.com/icons/descriptors/appetite@2x.png\",\n              \"quality\": \"2x\",\n              \"width\": 44,\n              \"height\": 44\n            },\n            {\n              \"url\": \"https://static-assets.gotinder.com/icons/descriptors/appetite@3x.png\",\n              \"quality\": \"3x\",\n              \"width\": 66,\n              \"height\": 66\n            }\n          ],\n          \"sectionId\": 6,\n          \"sectionName\": \"Lifestyle\",\n          \"shouldLocalizeChoices\": true,\n          \"discoveryPreferencesEnabled\": true\n        },\n        {\n          \"id\": \"de_4\",\n          \"name\": \"Social media\",\n          \"prompt\": \"How active are you on social media?\",\n          \"type\": \"single_selection_set\",\n          \"choices\": [\n            {\n              \"id\": \"1\",\n              \"name\": \"Influencer status\"\n            },\n            {\n              \"id\": \"2\",\n              \"name\": \"Socially active\"\n            },\n            {\n              \"id\": \"3\",\n              \"name\": \"Off the grid\"\n            },\n            {\n              \"id\": \"4\",\n              \"name\": \"Passive scroller\"\n            }\n          ],\n          \"iconUrl\": \"https://static-assets.gotinder.com/icons/descriptors/social_media@3x.png\",\n          \"iconUrls\": [\n            {\n              \"url\": \"https://static-assets.gotinder.com/icons/descriptors/social_media@1x.png\",\n              \"quality\": \"1x\",\n              \"width\": 22,\n              \"height\": 22\n            },\n            {\n              \"url\": \"https://static-assets.gotinder.com/icons/descriptors/social_media@2x.png\",\n              \"quality\": \"2x\",\n              \"width\": 44,\n              \"height\": 44\n            },\n            {\n              \"url\": \"https://static-assets.gotinder.com/icons/descriptors/social_media@3x.png\",\n              \"quality\": \"3x\",\n              \"width\": 66,\n              \"height\": 66\n            }\n          ],\n          \"sectionId\": 6,\n          \"sectionName\": \"Lifestyle\",\n          \"shouldLocalizeChoices\": true,\n          \"discoveryPreferencesEnabled\": true\n        },\n        {\n          \"id\": \"de_17\",\n          \"name\": \"Sleeping habits\",\n          \"prompt\": \"What are your sleeping habits?\",\n          \"type\": \"single_selection_set\",\n          \"choices\": [\n            {\n              \"id\": \"1\",\n              \"name\": \"Early bird\"\n            },\n            {\n              \"id\": \"2\",\n              \"name\": \"Night owl\"\n            },\n            {\n              \"id\": \"3\",\n              \"name\": \"It varies\"\n            }\n          ],\n          \"iconUrl\": \"https://static-assets.gotinder.com/icons/descriptors/sleeping_habits@3x.png\",\n          \"iconUrls\": [\n            {\n              \"url\": \"https://static-assets.gotinder.com/icons/descriptors/sleeping_habits@1x.png\",\n              \"quality\": \"1x\",\n              \"width\": 22,\n              \"height\": 22\n            },\n            {\n              \"url\": \"https://static-assets.gotinder.com/icons/descriptors/sleeping_habits@2x.png\",\n              \"quality\": \"2x\",\n              \"width\": 44,\n              \"height\": 44\n            },\n            {\n              \"url\": \"https://static-assets.gotinder.com/icons/descriptors/sleeping_habits@3x.png\",\n              \"quality\": \"3x\",\n              \"width\": 66,\n              \"height\": 66\n            }\n          ],\n          \"sectionId\": 6,\n          \"sectionName\": \"Lifestyle\",\n          \"shouldLocalizeChoices\": true,\n          \"discoveryPreferencesEnabled\": true\n        }\n      ]", new System.Text.Json.JsonDocumentOptions()),
                            DisplayType = "section",
                            Prompt = "Put your best self forward by adding your lifestyle",
                            SectionName = "Lifestyle"
                        });
                });

            modelBuilder.Entity("api.Models.BlockedUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("BlockedUserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("BlockerUserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("BlockedUserId");

                    b.HasIndex("BlockerUserId");

                    b.ToTable("BlockedUsers");
                });

            modelBuilder.Entity("api.Models.Country", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("IsoA2")
                        .HasColumnType("text");

                    b.Property<string>("IsoA3")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Geometry>("WkbGeometry")
                        .IsRequired()
                        .HasColumnType("geometry");

                    b.HasKey("Id");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("api.Models.Gender", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("Genders");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8708c64a-4e8c-4a31-86c1-98d9d678c124"),
                            Name = "Man"
                        },
                        new
                        {
                            Id = new Guid("4cdd2b8e-5005-491b-a513-e3a2d7ac37ce"),
                            Name = "Woman"
                        },
                        new
                        {
                            Id = new Guid("6adbf96a-6fd2-405b-95d1-d9edc442723f"),
                            Name = "Beyond binary"
                        },
                        new
                        {
                            Id = new Guid("05cbebab-f5cb-4a09-9b6b-e69cc80b170b"),
                            Description = "A man whose gender aligns with the sex they were assigned at birth.",
                            Name = "Cis man",
                            ParentId = new Guid("8708c64a-4e8c-4a31-86c1-98d9d678c124")
                        },
                        new
                        {
                            Id = new Guid("36fc7720-0a8f-4b08-8d2a-95beff04a29d"),
                            Description = "A man born with one or more variations in sex characteristics that don’t fit binary ideas of male or female bodies.",
                            Name = "Intersex man",
                            ParentId = new Guid("8708c64a-4e8c-4a31-86c1-98d9d678c124")
                        },
                        new
                        {
                            Id = new Guid("b6d8a7a9-8ac5-421d-9a88-17b3b9df5243"),
                            Description = "A man whose gender is different from his sex assigned at birth.",
                            Name = "Trans man",
                            ParentId = new Guid("8708c64a-4e8c-4a31-86c1-98d9d678c124")
                        },
                        new
                        {
                            Id = new Guid("d7c76ad0-d770-4b4f-865d-c809310b4f76"),
                            Description = "A person who was assigned female at birth, but presents as masculine. This person may or may not see themselves as a man or a transgender man.",
                            Name = "Transmasculine",
                            ParentId = new Guid("8708c64a-4e8c-4a31-86c1-98d9d678c124")
                        },
                        new
                        {
                            Id = new Guid("f1ea2c16-40dd-49f5-a982-4ab11ab162be"),
                            Description = "A woman whose gender aligns with the sex they were assigned at birth.",
                            Name = "Cis woman",
                            ParentId = new Guid("4cdd2b8e-5005-491b-a513-e3a2d7ac37ce")
                        },
                        new
                        {
                            Id = new Guid("6f132bdd-51bf-4840-8b76-312e8bbc989d"),
                            Description = "A woman born with one or more variations in sex characteristics that don’t fit binary ideas of male or female bodies.",
                            Name = "Intersex woman",
                            ParentId = new Guid("4cdd2b8e-5005-491b-a513-e3a2d7ac37ce")
                        },
                        new
                        {
                            Id = new Guid("9708700b-34be-4b54-a904-ec95bcf5cead"),
                            Description = "A woman whose gender is different from her sex assigned at birth.",
                            Name = "Trans woman",
                            ParentId = new Guid("4cdd2b8e-5005-491b-a513-e3a2d7ac37ce")
                        },
                        new
                        {
                            Id = new Guid("a6bc74aa-e235-4211-bb31-3ef16774d88f"),
                            Description = "A person who was assigned male at birth, but presents as feminine. This person may or may not see themselves as a woman or a transgender woman.",
                            Name = "Transfeminine",
                            ParentId = new Guid("4cdd2b8e-5005-491b-a513-e3a2d7ac37ce")
                        },
                        new
                        {
                            Id = new Guid("f9909746-a4b6-4d76-a24a-9c293dd8ceaa"),
                            Description = "A person who does not have a gender.",
                            Name = "Agender",
                            ParentId = new Guid("6adbf96a-6fd2-405b-95d1-d9edc442723f")
                        },
                        new
                        {
                            Id = new Guid("873c6fb0-bdaf-4449-b026-5c4b9c4a0409"),
                            Description = "A person who has two or more genders (can be simultaneously or fluid between them).",
                            Name = "Bigender",
                            ParentId = new Guid("6adbf96a-6fd2-405b-95d1-d9edc442723f")
                        },
                        new
                        {
                            Id = new Guid("5fc85dc1-9ae0-4402-b564-311bd288caad"),
                            Description = "A person who does not have a single fixed gender.",
                            Name = "Gender fluid",
                            ParentId = new Guid("6adbf96a-6fd2-405b-95d1-d9edc442723f")
                        },
                        new
                        {
                            Id = new Guid("c7d392f7-293e-4969-b9d8-ef416df9c517"),
                            Description = "A person who is questioning their current gender and/or exploring other genders and expressions.",
                            Name = "Gender questioning",
                            ParentId = new Guid("6adbf96a-6fd2-405b-95d1-d9edc442723f")
                        },
                        new
                        {
                            Id = new Guid("e6bbebd9-b191-460f-9472-7c4f9e71b6ad"),
                            Description = "A person who does not identify or express their gender within the gender binary.",
                            Name = "Genderqueer",
                            ParentId = new Guid("6adbf96a-6fd2-405b-95d1-d9edc442723f")
                        },
                        new
                        {
                            Id = new Guid("470743f2-35b8-4f95-bd44-5ca0ada83a52"),
                            Description = "An umbrella term that refers to people born with one or more variations in sex characteristics that don’t fit binary ideas of male or female bodies.",
                            Name = "Intersex",
                            ParentId = new Guid("6adbf96a-6fd2-405b-95d1-d9edc442723f")
                        },
                        new
                        {
                            Id = new Guid("8d4d6b90-bc2c-495d-ad78-bfd436b16fc5"),
                            Description = "A person whose gender is beyond the exclusive categories of man and woman.",
                            Name = "Non-binary",
                            ParentId = new Guid("6adbf96a-6fd2-405b-95d1-d9edc442723f")
                        },
                        new
                        {
                            Id = new Guid("68924bae-c5de-4987-a3c1-67f226f2c33a"),
                            Description = "A person who experiences multiple genders either simultaneously or over time.",
                            Name = "Pangender",
                            ParentId = new Guid("6adbf96a-6fd2-405b-95d1-d9edc442723f")
                        },
                        new
                        {
                            Id = new Guid("0d1ee1ae-5720-4b2c-8f19-39dbb3efb3d5"),
                            Description = "A person who is transgender and their gender is different from the sex assigned to them at birth.",
                            Name = "Trans person",
                            ParentId = new Guid("6adbf96a-6fd2-405b-95d1-d9edc442723f")
                        },
                        new
                        {
                            Id = new Guid("e8175bac-4ee7-4605-80bf-c4bc2906cad3"),
                            Description = "A person who was assigned male at birth, but presents as feminine. This person may or may not see themselves as a woman or a transgender woman.",
                            Name = "Transfeminine",
                            ParentId = new Guid("6adbf96a-6fd2-405b-95d1-d9edc442723f")
                        },
                        new
                        {
                            Id = new Guid("189e251e-06d4-4c02-b532-7c0ead76cf25"),
                            Description = "A person who was assigned female at birth, but presents as masculine. This person may or may not see themselves as a man or a transgender man.",
                            Name = "Transmasculine",
                            ParentId = new Guid("6adbf96a-6fd2-405b-95d1-d9edc442723f")
                        },
                        new
                        {
                            Id = new Guid("4398cce0-3204-4a4a-baf6-a77c9e80f426"),
                            Description = "An umbrella term used across US Native American and Canadian First Nations communities to honour the sacred role that people who are not exclusively cisgender and/or heterosexual hold.",
                            Name = "Two-Spirit",
                            ParentId = new Guid("6adbf96a-6fd2-405b-95d1-d9edc442723f")
                        });
                });

            modelBuilder.Entity("api.Models.HiddenRoom", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("HiddenAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("uuid");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoomId");

                    b.HasIndex("UserId");

                    b.ToTable("HiddenRooms");
                });

            modelBuilder.Entity("api.Models.Match", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Origin")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("User1Id")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("User2Id")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("User1Id");

                    b.HasIndex("User2Id");

                    b.ToTable("Matches");
                });

            modelBuilder.Entity("api.Models.Media", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("MediaType")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Media");
                });

            modelBuilder.Entity("api.Models.Message", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ReceiverId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SenderId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("SenderId");

                    b.ToTable("Messages");

                    b.HasAnnotation("Npgsql:Enum:message_status", "Sent,Delivered,Read");
                });

            modelBuilder.Entity("api.Models.QuestionCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("QuestionCategories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ae9dd40b-b6b3-4f7f-a299-951ecd31235a"),
                            CreatedAt = new DateTime(2024, 11, 17, 22, 34, 32, 471, DateTimeKind.Utc).AddTicks(5380),
                            Name = "Sexual",
                            UpdatedAt = new DateTime(2024, 11, 17, 22, 34, 32, 471, DateTimeKind.Utc).AddTicks(5380)
                        },
                        new
                        {
                            Id = new Guid("2ff7af7f-4e4f-4508-aa00-1ff45de82467"),
                            CreatedAt = new DateTime(2024, 11, 17, 22, 34, 32, 471, DateTimeKind.Utc).AddTicks(5390),
                            Name = "Funny",
                            UpdatedAt = new DateTime(2024, 11, 17, 22, 34, 32, 471, DateTimeKind.Utc).AddTicks(5390)
                        },
                        new
                        {
                            Id = new Guid("2ddab326-f330-481b-a6d8-73a8aa1d715a"),
                            CreatedAt = new DateTime(2024, 11, 17, 22, 34, 32, 471, DateTimeKind.Utc).AddTicks(5390),
                            Name = "Flirty",
                            UpdatedAt = new DateTime(2024, 11, 17, 22, 34, 32, 471, DateTimeKind.Utc).AddTicks(5390)
                        },
                        new
                        {
                            Id = new Guid("1c275fd6-53c1-4521-8d9a-501a1e57b872"),
                            CreatedAt = new DateTime(2024, 11, 17, 22, 34, 32, 471, DateTimeKind.Utc).AddTicks(5400),
                            Name = "Edgy",
                            UpdatedAt = new DateTime(2024, 11, 17, 22, 34, 32, 471, DateTimeKind.Utc).AddTicks(5400)
                        },
                        new
                        {
                            Id = new Guid("02ecd7c1-d98c-4b87-9577-a3ba9268913b"),
                            CreatedAt = new DateTime(2024, 11, 17, 22, 34, 32, 471, DateTimeKind.Utc).AddTicks(5400),
                            Name = "Connection-building",
                            UpdatedAt = new DateTime(2024, 11, 17, 22, 34, 32, 471, DateTimeKind.Utc).AddTicks(5400)
                        },
                        new
                        {
                            Id = new Guid("f9d7cd77-d00f-4f90-ae3c-031b58519c07"),
                            CreatedAt = new DateTime(2024, 11, 17, 22, 34, 32, 471, DateTimeKind.Utc).AddTicks(5410),
                            Name = "Dilemma",
                            UpdatedAt = new DateTime(2024, 11, 17, 22, 34, 32, 471, DateTimeKind.Utc).AddTicks(5410)
                        });
                });

            modelBuilder.Entity("api.Models.Room", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("FinishedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<JsonDocument>("Offers")
                        .HasColumnType("jsonb");

                    b.Property<List<Guid>>("QuestionsCategories")
                        .IsRequired()
                        .HasColumnType("uuid[]");

                    b.Property<JsonDocument>("RoomStateJson")
                        .HasColumnType("jsonb");

                    b.Property<DateTime?>("ScheduledAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("StartedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Rooms");
                });

            modelBuilder.Entity("api.Models.RoomContent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Duration")
                        .HasColumnType("numeric");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("RoomContent");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8e408eee-0ed7-4199-8612-c851d127563d"),
                            CreatedAt = new DateTime(2024, 11, 17, 22, 34, 32, 471, DateTimeKind.Utc).AddTicks(6150),
                            Description = "Give us the scoop on the person behind the screen!",
                            Duration = 60m,
                            Order = 1,
                            Title = "Meet & Greet",
                            UpdatedAt = new DateTime(2024, 11, 17, 22, 34, 32, 471, DateTimeKind.Utc).AddTicks(6150)
                        },
                        new
                        {
                            Id = new Guid("f7b4c72c-d2fe-411d-9e78-331259f14d44"),
                            CreatedAt = new DateTime(2024, 11, 17, 22, 34, 32, 471, DateTimeKind.Utc).AddTicks(6170),
                            Description = "Share your passions and two quirky facts about yourself!",
                            Duration = 120m,
                            Order = 2,
                            Title = "Hobby Showcase & Fun Fact Extravaganza",
                            UpdatedAt = new DateTime(2024, 11, 17, 22, 34, 32, 471, DateTimeKind.Utc).AddTicks(6170)
                        },
                        new
                        {
                            Id = new Guid("212842a5-9e8b-48bc-a641-c1005bb8b3d7"),
                            CreatedAt = new DateTime(2024, 11, 17, 22, 34, 32, 471, DateTimeKind.Utc).AddTicks(6170),
                            Description = "Brace yourself for some off-the-wall questions and give your best answers within the time limit!",
                            Duration = 300m,
                            Order = 3,
                            Title = "Random Question Roulette",
                            UpdatedAt = new DateTime(2024, 11, 17, 22, 34, 32, 471, DateTimeKind.Utc).AddTicks(6170)
                        },
                        new
                        {
                            Id = new Guid("e519ab86-a2f2-49cc-b76f-670d853e8f74"),
                            CreatedAt = new DateTime(2024, 11, 17, 22, 34, 32, 471, DateTimeKind.Utc).AddTicks(6180),
                            Description = "Get ready to field questions from your adoring audience!",
                            Duration = 300m,
                            Order = 4,
                            Title = "Spotlight Q&A",
                            UpdatedAt = new DateTime(2024, 11, 17, 22, 34, 32, 471, DateTimeKind.Utc).AddTicks(6180)
                        },
                        new
                        {
                            Id = new Guid("4d82fb65-d616-4953-a4e7-fe5c5b7b3d6b"),
                            CreatedAt = new DateTime(2024, 11, 17, 22, 34, 32, 471, DateTimeKind.Utc).AddTicks(6190),
                            Description = "Pop your best question to the remaining contenders, and whoever nails it gets the match!",
                            Duration = 60m,
                            Order = 5,
                            Title = "The Final Rose",
                            UpdatedAt = new DateTime(2024, 11, 17, 22, 34, 32, 471, DateTimeKind.Utc).AddTicks(6190)
                        });
                });

            modelBuilder.Entity("api.Models.RoomParticipant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoomId");

                    b.HasIndex("UserId");

                    b.ToTable("RoomParticipants");
                });

            modelBuilder.Entity("api.Models.RoomParticipantEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("AttendedFromTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("AttendedToTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Left")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("RoomParticipantId")
                        .HasColumnType("uuid");

                    b.Property<string>("SocketId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("RoomParticipantId");

                    b.ToTable("RoomParticipantEvents");
                });

            modelBuilder.Entity("api.Models.SystemQuestion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("SystemQuestions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b23d40d8-e7ec-4382-b766-9b831076ae06"),
                            CategoryId = new Guid("ae9dd40b-b6b3-4f7f-a299-951ecd31235a"),
                            CreatedAt = new DateTime(2024, 11, 17, 22, 34, 32, 471, DateTimeKind.Utc).AddTicks(5460),
                            Name = "What physical act gives you the most pleasure?",
                            UpdatedAt = new DateTime(2024, 11, 17, 22, 34, 32, 471, DateTimeKind.Utc).AddTicks(5460)
                        },
                        new
                        {
                            Id = new Guid("7b0f9739-407d-4a60-8c02-5e81767d94d6"),
                            CategoryId = new Guid("ae9dd40b-b6b3-4f7f-a299-951ecd31235a"),
                            CreatedAt = new DateTime(2024, 11, 17, 22, 34, 32, 471, DateTimeKind.Utc).AddTicks(5470),
                            Name = "Do you prefer firm or light touches?",
                            UpdatedAt = new DateTime(2024, 11, 17, 22, 34, 32, 471, DateTimeKind.Utc).AddTicks(5470)
                        },
                        new
                        {
                            Id = new Guid("ebacb433-19e0-4dae-8e86-ff4e8010f423"),
                            CategoryId = new Guid("ae9dd40b-b6b3-4f7f-a299-951ecd31235a"),
                            CreatedAt = new DateTime(2024, 11, 17, 22, 34, 32, 471, DateTimeKind.Utc).AddTicks(5480),
                            Name = "Do guy-on-guy videos turn you on more than guy-on-girl?",
                            UpdatedAt = new DateTime(2024, 11, 17, 22, 34, 32, 471, DateTimeKind.Utc).AddTicks(5480)
                        },
                        new
                        {
                            Id = new Guid("8375d127-afb9-4205-ae3e-f1bf05b2b488"),
                            CategoryId = new Guid("ae9dd40b-b6b3-4f7f-a299-951ecd31235a"),
                            CreatedAt = new DateTime(2024, 11, 17, 22, 34, 32, 471, DateTimeKind.Utc).AddTicks(5490),
                            Name = "Do you think it’s okay if a guy wants to be submissive in the bedroom?",
                            UpdatedAt = new DateTime(2024, 11, 17, 22, 34, 32, 471, DateTimeKind.Utc).AddTicks(5490)
                        },
                        new
                        {
                            Id = new Guid("94f04d37-a585-4c54-a131-1639f942d077"),
                            CategoryId = new Guid("ae9dd40b-b6b3-4f7f-a299-951ecd31235a"),
                            CreatedAt = new DateTime(2024, 11, 17, 22, 34, 32, 471, DateTimeKind.Utc).AddTicks(5490),
                            Name = "Would you rather receive or give oral?",
                            UpdatedAt = new DateTime(2024, 11, 17, 22, 34, 32, 471, DateTimeKind.Utc).AddTicks(5490)
                        },
                        new
                        {
                            Id = new Guid("5129f301-67eb-4409-a63f-1ee1d7818139"),
                            CategoryId = new Guid("ae9dd40b-b6b3-4f7f-a299-951ecd31235a"),
                            CreatedAt = new DateTime(2024, 11, 17, 22, 34, 32, 471, DateTimeKind.Utc).AddTicks(5500),
                            Name = "Do you prefer to make out with the lights on or off?",
                            UpdatedAt = new DateTime(2024, 11, 17, 22, 34, 32, 471, DateTimeKind.Utc).AddTicks(5500)
                        },
                        new
                        {
                            Id = new Guid("f73f2b1b-7909-400d-9052-837cc101c2f9"),
                            CategoryId = new Guid("ae9dd40b-b6b3-4f7f-a299-951ecd31235a"),
                            CreatedAt = new DateTime(2024, 11, 17, 22, 34, 32, 471, DateTimeKind.Utc).AddTicks(5510),
                            Name = "Would you rather end a good first date with a passionate kiss or sex?",
                            UpdatedAt = new DateTime(2024, 11, 17, 22, 34, 32, 471, DateTimeKind.Utc).AddTicks(5510)
                        },
                        new
                        {
                            Id = new Guid("d7a5f829-e2d2-4393-8f1d-d36d817f2bd7"),
                            CategoryId = new Guid("ae9dd40b-b6b3-4f7f-a299-951ecd31235a"),
                            CreatedAt = new DateTime(2024, 11, 17, 22, 34, 32, 471, DateTimeKind.Utc).AddTicks(5510),
                            Name = "Are you more dominant or submissive in bed?",
                            UpdatedAt = new DateTime(2024, 11, 17, 22, 34, 32, 471, DateTimeKind.Utc).AddTicks(5510)
                        },
                        new
                        {
                            Id = new Guid("35d96d33-3e06-45f3-8d7f-0c2ebee86367"),
                            CategoryId = new Guid("ae9dd40b-b6b3-4f7f-a299-951ecd31235a"),
                            CreatedAt = new DateTime(2024, 11, 17, 22, 34, 32, 471, DateTimeKind.Utc).AddTicks(5520),
                            Name = "What do you fantasize about when you touch yourself?",
                            UpdatedAt = new DateTime(2024, 11, 17, 22, 34, 32, 471, DateTimeKind.Utc).AddTicks(5520)
                        },
                        new
                        {
                            Id = new Guid("f2a1cd16-a41b-4722-a2ef-06134aa05d95"),
                            CategoryId = new Guid("ae9dd40b-b6b3-4f7f-a299-951ecd31235a"),
                            CreatedAt = new DateTime(2024, 11, 17, 22, 34, 32, 471, DateTimeKind.Utc).AddTicks(5530),
                            Name = "Do you like to roleplay?",
                            UpdatedAt = new DateTime(2024, 11, 17, 22, 34, 32, 471, DateTimeKind.Utc).AddTicks(5530)
                        },
                        new
                        {
                            Id = new Guid("63bbe4c1-0663-4c81-8a1d-560d908beed7"),
                            CategoryId = new Guid("ae9dd40b-b6b3-4f7f-a299-951ecd31235a"),
                            CreatedAt = new DateTime(2024, 11, 17, 22, 34, 32, 471, DateTimeKind.Utc).AddTicks(5530),
                            Name = "Have you ever had sex with someone you just met?",
                            UpdatedAt = new DateTime(2024, 11, 17, 22, 34, 32, 471, DateTimeKind.Utc).AddTicks(5530)
                        },
                        new
                        {
                            Id = new Guid("dfa7f43d-065b-4c6f-b7f2-798e42295261"),
                            CategoryId = new Guid("ae9dd40b-b6b3-4f7f-a299-951ecd31235a"),
                            CreatedAt = new DateTime(2024, 11, 17, 22, 34, 32, 471, DateTimeKind.Utc).AddTicks(5540),
                            Name = "What’s the dirtiest thought you’ve ever had about a stranger?",
                            UpdatedAt = new DateTime(2024, 11, 17, 22, 34, 32, 471, DateTimeKind.Utc).AddTicks(5540)
                        },
                        new
                        {
                            Id = new Guid("07b1fe5e-cb80-47b2-8243-14b7eb9052d5"),
                            CategoryId = new Guid("ae9dd40b-b6b3-4f7f-a299-951ecd31235a"),
                            CreatedAt = new DateTime(2024, 11, 17, 22, 34, 32, 471, DateTimeKind.Utc).AddTicks(5550),
                            Name = "What does your ideal one-night stand look like?",
                            UpdatedAt = new DateTime(2024, 11, 17, 22, 34, 32, 471, DateTimeKind.Utc).AddTicks(5550)
                        },
                        new
                        {
                            Id = new Guid("5a9ea3c8-c13f-4a03-98e8-b3afc5c464f8"),
                            CategoryId = new Guid("ae9dd40b-b6b3-4f7f-a299-951ecd31235a"),
                            CreatedAt = new DateTime(2024, 11, 17, 22, 34, 32, 471, DateTimeKind.Utc).AddTicks(5550),
                            Name = "If a cute couple asked you to do a threesome, would you say yes?",
                            UpdatedAt = new DateTime(2024, 11, 17, 22, 34, 32, 471, DateTimeKind.Utc).AddTicks(5550)
                        },
                        new
                        {
                            Id = new Guid("c9f7cd6d-5e07-4e4a-b0c3-6cb09b8124b7"),
                            CategoryId = new Guid("ae9dd40b-b6b3-4f7f-a299-951ecd31235a"),
                            CreatedAt = new DateTime(2024, 11, 17, 22, 34, 32, 471, DateTimeKind.Utc).AddTicks(5560),
                            Name = "What are your thoughts on toys?",
                            UpdatedAt = new DateTime(2024, 11, 17, 22, 34, 32, 471, DateTimeKind.Utc).AddTicks(5560)
                        },
                        new
                        {
                            Id = new Guid("855036c3-db5b-43bb-bb44-a293ba965fba"),
                            CategoryId = new Guid("ae9dd40b-b6b3-4f7f-a299-951ecd31235a"),
                            CreatedAt = new DateTime(2024, 11, 17, 22, 34, 32, 471, DateTimeKind.Utc).AddTicks(5570),
                            Name = "What’s the dirtiest thing someone said to you during sex?",
                            UpdatedAt = new DateTime(2024, 11, 17, 22, 34, 32, 471, DateTimeKind.Utc).AddTicks(5570)
                        },
                        new
                        {
                            Id = new Guid("7a12bd37-ef52-4d67-952f-a3dad415fd36"),
                            CategoryId = new Guid("ae9dd40b-b6b3-4f7f-a299-951ecd31235a"),
                            CreatedAt = new DateTime(2024, 11, 17, 22, 34, 32, 471, DateTimeKind.Utc).AddTicks(5570),
                            Name = "Where do you like to be touched most?",
                            UpdatedAt = new DateTime(2024, 11, 17, 22, 34, 32, 471, DateTimeKind.Utc).AddTicks(5570)
                        },
                        new
                        {
                            Id = new Guid("ca473ed6-4652-45fc-be92-226b4cb60bcf"),
                            CategoryId = new Guid("2ff7af7f-4e4f-4508-aa00-1ff45de82467"),
                            CreatedAt = new DateTime(2024, 11, 17, 22, 34, 32, 471, DateTimeKind.Utc).AddTicks(5580),
                            Name = "What meal or snack will you never refuse?",
                            UpdatedAt = new DateTime(2024, 11, 17, 22, 34, 32, 471, DateTimeKind.Utc).AddTicks(5580)
                        },
                        new
                        {
                            Id = new Guid("f6ff4720-261f-46ba-9915-dd5f3021eac5"),
                            CategoryId = new Guid("2ff7af7f-4e4f-4508-aa00-1ff45de82467"),
                            CreatedAt = new DateTime(2024, 11, 17, 22, 34, 32, 471, DateTimeKind.Utc).AddTicks(5590),
                            Name = "Zombies are overrunning the world. How do you defend yourself?",
                            UpdatedAt = new DateTime(2024, 11, 17, 22, 34, 32, 471, DateTimeKind.Utc).AddTicks(5590)
                        },
                        new
                        {
                            Id = new Guid("f5413d7d-3897-4117-9c83-836878b090ec"),
                            CategoryId = new Guid("2ff7af7f-4e4f-4508-aa00-1ff45de82467"),
                            CreatedAt = new DateTime(2024, 11, 17, 22, 34, 32, 471, DateTimeKind.Utc).AddTicks(5590),
                            Name = "What’s the weirdest thing you carry in your purse?",
                            UpdatedAt = new DateTime(2024, 11, 17, 22, 34, 32, 471, DateTimeKind.Utc).AddTicks(5590)
                        },
                        new
                        {
                            Id = new Guid("2eb1b4fb-3153-45ae-91b1-1e3292394a4a"),
                            CategoryId = new Guid("2ff7af7f-4e4f-4508-aa00-1ff45de82467"),
                            CreatedAt = new DateTime(2024, 11, 17, 22, 34, 32, 471, DateTimeKind.Utc).AddTicks(5600),
                            Name = "Do you think that men can be gynecologists? (Second question) What if he sniffs his finger?",
                            UpdatedAt = new DateTime(2024, 11, 17, 22, 34, 32, 471, DateTimeKind.Utc).AddTicks(5600)
                        },
                        new
                        {
                            Id = new Guid("bc44673f-2efb-49aa-b55c-18cb14f3d641"),
                            CategoryId = new Guid("2ff7af7f-4e4f-4508-aa00-1ff45de82467"),
                            CreatedAt = new DateTime(2024, 11, 17, 22, 34, 32, 471, DateTimeKind.Utc).AddTicks(5600),
                            Name = "What was the last time you went skinny dipping?",
                            UpdatedAt = new DateTime(2024, 11, 17, 22, 34, 32, 471, DateTimeKind.Utc).AddTicks(5610)
                        },
                        new
                        {
                            Id = new Guid("f9237174-afa2-463f-8045-716a896025ca"),
                            CategoryId = new Guid("2ff7af7f-4e4f-4508-aa00-1ff45de82467"),
                            CreatedAt = new DateTime(2024, 11, 17, 22, 34, 32, 471, DateTimeKind.Utc).AddTicks(5610),
                            Name = "Would you date someone who’s cute but mega dumb?",
                            UpdatedAt = new DateTime(2024, 11, 17, 22, 34, 32, 471, DateTimeKind.Utc).AddTicks(5610)
                        },
                        new
                        {
                            Id = new Guid("40d6b357-8672-4cda-a787-89104d7242d4"),
                            CategoryId = new Guid("2ff7af7f-4e4f-4508-aa00-1ff45de82467"),
                            CreatedAt = new DateTime(2024, 11, 17, 22, 34, 32, 471, DateTimeKind.Utc).AddTicks(5620),
                            Name = "What’s the last time you did something scary?",
                            UpdatedAt = new DateTime(2024, 11, 17, 22, 34, 32, 471, DateTimeKind.Utc).AddTicks(5620)
                        },
                        new
                        {
                            Id = new Guid("b19c4fca-b7e1-4d34-ba65-2660b694d186"),
                            CategoryId = new Guid("2ff7af7f-4e4f-4508-aa00-1ff45de82467"),
                            CreatedAt = new DateTime(2024, 11, 17, 22, 34, 32, 471, DateTimeKind.Utc).AddTicks(5620),
                            Name = "You have to assassinate someone who really deserves it. How do you do it?",
                            UpdatedAt = new DateTime(2024, 11, 17, 22, 34, 32, 471, DateTimeKind.Utc).AddTicks(5620)
                        },
                        new
                        {
                            Id = new Guid("d22893a8-cf57-41b5-91d2-29c6e06ac895"),
                            CategoryId = new Guid("2ff7af7f-4e4f-4508-aa00-1ff45de82467"),
                            CreatedAt = new DateTime(2024, 11, 17, 22, 34, 32, 471, DateTimeKind.Utc).AddTicks(5630),
                            Name = "If your friends and family hear that you were arrested, what would they think you did?",
                            UpdatedAt = new DateTime(2024, 11, 17, 22, 34, 32, 471, DateTimeKind.Utc).AddTicks(5630)
                        },
                        new
                        {
                            Id = new Guid("98458966-8deb-4acd-97df-abeaed0f3232"),
                            CategoryId = new Guid("2ff7af7f-4e4f-4508-aa00-1ff45de82467"),
                            CreatedAt = new DateTime(2024, 11, 17, 22, 34, 32, 471, DateTimeKind.Utc).AddTicks(5640),
                            Name = "You and all your friends have to enter a mixed martial arts tournament. Do you win?",
                            UpdatedAt = new DateTime(2024, 11, 17, 22, 34, 32, 471, DateTimeKind.Utc).AddTicks(5640)
                        },
                        new
                        {
                            Id = new Guid("64236237-303b-413f-a85e-6995567bdb87"),
                            CategoryId = new Guid("2ff7af7f-4e4f-4508-aa00-1ff45de82467"),
                            CreatedAt = new DateTime(2024, 11, 17, 22, 34, 32, 471, DateTimeKind.Utc).AddTicks(5640),
                            Name = "You’re on a first date with a dude you like and you let out an audible fart. What do you do?",
                            UpdatedAt = new DateTime(2024, 11, 17, 22, 34, 32, 471, DateTimeKind.Utc).AddTicks(5640)
                        },
                        new
                        {
                            Id = new Guid("6a70650d-2aee-4856-89cd-9e3b85138eaa"),
                            CategoryId = new Guid("2ff7af7f-4e4f-4508-aa00-1ff45de82467"),
                            CreatedAt = new DateTime(2024, 11, 17, 22, 34, 32, 471, DateTimeKind.Utc).AddTicks(5650),
                            Name = "You find out your best friend is a lesbian and she’s in love with you. How do you react?",
                            UpdatedAt = new DateTime(2024, 11, 17, 22, 34, 32, 471, DateTimeKind.Utc).AddTicks(5650)
                        },
                        new
                        {
                            Id = new Guid("e363f864-f107-461a-b7d4-ea44ee2fb4b8"),
                            CategoryId = new Guid("2ff7af7f-4e4f-4508-aa00-1ff45de82467"),
                            CreatedAt = new DateTime(2024, 11, 17, 22, 34, 32, 471, DateTimeKind.Utc).AddTicks(5660),
                            Name = "Do you prefer the smell of freshly cut grass or freshly baked bread?",
                            UpdatedAt = new DateTime(2024, 11, 17, 22, 34, 32, 471, DateTimeKind.Utc).AddTicks(5660)
                        },
                        new
                        {
                            Id = new Guid("af90c16e-8f0e-4bc9-90aa-5883588db8d4"),
                            CategoryId = new Guid("2ff7af7f-4e4f-4508-aa00-1ff45de82467"),
                            CreatedAt = new DateTime(2024, 11, 17, 22, 34, 32, 471, DateTimeKind.Utc).AddTicks(5660),
                            Name = "You’re at a party and really need to drop a deuce. But their toilet doesn’t flush. Do you use the toilet anyway, or do your business in the yard?",
                            UpdatedAt = new DateTime(2024, 11, 17, 22, 34, 32, 471, DateTimeKind.Utc).AddTicks(5660)
                        },
                        new
                        {
                            Id = new Guid("938bca5a-7cc1-4fd0-9710-29ece719558c"),
                            CategoryId = new Guid("2ddab326-f330-481b-a6d8-73a8aa1d715a"),
                            CreatedAt = new DateTime(2024, 11, 17, 22, 34, 32, 471, DateTimeKind.Utc).AddTicks(5670),
                            Name = "What’s your favorite way to be seduced by a man?",
                            UpdatedAt = new DateTime(2024, 11, 17, 22, 34, 32, 471, DateTimeKind.Utc).AddTicks(5670)
                        },
                        new
                        {
                            Id = new Guid("94244795-9802-43d7-83a6-88e4fe5f745b"),
                            CategoryId = new Guid("2ddab326-f330-481b-a6d8-73a8aa1d715a"),
                            CreatedAt = new DateTime(2024, 11, 17, 22, 34, 32, 471, DateTimeKind.Utc).AddTicks(5670),
                            Name = "What do you miss most about being single? (She has to pick something.)",
                            UpdatedAt = new DateTime(2024, 11, 17, 22, 34, 32, 471, DateTimeKind.Utc).AddTicks(5680)
                        },
                        new
                        {
                            Id = new Guid("5a25cf8f-c3d8-46dc-bdc1-7a678967d0db"),
                            CategoryId = new Guid("2ddab326-f330-481b-a6d8-73a8aa1d715a"),
                            CreatedAt = new DateTime(2024, 11, 17, 22, 34, 32, 471, DateTimeKind.Utc).AddTicks(5680),
                            Name = "What’s the best romantic surprise you’ve ever had?",
                            UpdatedAt = new DateTime(2024, 11, 17, 22, 34, 32, 471, DateTimeKind.Utc).AddTicks(5690)
                        },
                        new
                        {
                            Id = new Guid("3708badb-fe39-4c32-a6ed-f53f985c29de"),
                            CategoryId = new Guid("2ddab326-f330-481b-a6d8-73a8aa1d715a"),
                            CreatedAt = new DateTime(2024, 11, 17, 22, 34, 32, 471, DateTimeKind.Utc).AddTicks(5690),
                            Name = "What do you find the most attractive in a man?",
                            UpdatedAt = new DateTime(2024, 11, 17, 22, 34, 32, 471, DateTimeKind.Utc).AddTicks(5690)
                        },
                        new
                        {
                            Id = new Guid("b3e42a73-a830-4aac-b805-6911627ffa95"),
                            CategoryId = new Guid("2ddab326-f330-481b-a6d8-73a8aa1d715a"),
                            CreatedAt = new DateTime(2024, 11, 17, 22, 34, 32, 471, DateTimeKind.Utc).AddTicks(5700),
                            Name = "What does good sex mean to you?",
                            UpdatedAt = new DateTime(2024, 11, 17, 22, 34, 32, 471, DateTimeKind.Utc).AddTicks(5700)
                        },
                        new
                        {
                            Id = new Guid("dc4b6457-a516-498d-a73a-b971a8a6b1b5"),
                            CategoryId = new Guid("2ddab326-f330-481b-a6d8-73a8aa1d715a"),
                            CreatedAt = new DateTime(2024, 11, 17, 22, 34, 32, 471, DateTimeKind.Utc).AddTicks(5700),
                            Name = "What are your biggest turn-offs?",
                            UpdatedAt = new DateTime(2024, 11, 17, 22, 34, 32, 471, DateTimeKind.Utc).AddTicks(5700)
                        },
                        new
                        {
                            Id = new Guid("67fb3e02-5f57-446a-80ec-6ef68fc1f46c"),
                            CategoryId = new Guid("2ddab326-f330-481b-a6d8-73a8aa1d715a"),
                            CreatedAt = new DateTime(2024, 11, 17, 22, 34, 32, 471, DateTimeKind.Utc).AddTicks(5710),
                            Name = "What do you think is the most important thing a woman can give to a man?",
                            UpdatedAt = new DateTime(2024, 11, 17, 22, 34, 32, 471, DateTimeKind.Utc).AddTicks(5710)
                        },
                        new
                        {
                            Id = new Guid("d6f20102-e99c-456a-ae4e-215200700cb1"),
                            CategoryId = new Guid("2ddab326-f330-481b-a6d8-73a8aa1d715a"),
                            CreatedAt = new DateTime(2024, 11, 17, 22, 34, 32, 471, DateTimeKind.Utc).AddTicks(5720),
                            Name = "What makes you feel sexy?",
                            UpdatedAt = new DateTime(2024, 11, 17, 22, 34, 32, 471, DateTimeKind.Utc).AddTicks(5720)
                        },
                        new
                        {
                            Id = new Guid("c5afe04f-c319-4bb3-8be9-f51735a0890f"),
                            CategoryId = new Guid("2ddab326-f330-481b-a6d8-73a8aa1d715a"),
                            CreatedAt = new DateTime(2024, 11, 17, 22, 34, 32, 471, DateTimeKind.Utc).AddTicks(5720),
                            Name = "What’s the hottest thing a guy can do for you?",
                            UpdatedAt = new DateTime(2024, 11, 17, 22, 34, 32, 471, DateTimeKind.Utc).AddTicks(5730)
                        },
                        new
                        {
                            Id = new Guid("df289085-afeb-470f-bc73-eeb1d15ab362"),
                            CategoryId = new Guid("2ddab326-f330-481b-a6d8-73a8aa1d715a"),
                            CreatedAt = new DateTime(2024, 11, 17, 22, 34, 32, 471, DateTimeKind.Utc).AddTicks(5730),
                            Name = "Can you surrender to love or is it something that scares you?",
                            UpdatedAt = new DateTime(2024, 11, 17, 22, 34, 32, 471, DateTimeKind.Utc).AddTicks(5730)
                        },
                        new
                        {
                            Id = new Guid("81590d97-0fcf-4a92-92b1-29a2e202c458"),
                            CategoryId = new Guid("2ddab326-f330-481b-a6d8-73a8aa1d715a"),
                            CreatedAt = new DateTime(2024, 11, 17, 22, 34, 32, 471, DateTimeKind.Utc).AddTicks(5740),
                            Name = "Do you prefer cuddling or kissing?",
                            UpdatedAt = new DateTime(2024, 11, 17, 22, 34, 32, 471, DateTimeKind.Utc).AddTicks(5740)
                        },
                        new
                        {
                            Id = new Guid("9a121386-672a-41bb-a5cd-969c57ae19da"),
                            CategoryId = new Guid("2ddab326-f330-481b-a6d8-73a8aa1d715a"),
                            CreatedAt = new DateTime(2024, 11, 17, 22, 34, 32, 471, DateTimeKind.Utc).AddTicks(5740),
                            Name = "What do you wear when you go to sleep?",
                            UpdatedAt = new DateTime(2024, 11, 17, 22, 34, 32, 471, DateTimeKind.Utc).AddTicks(5740)
                        },
                        new
                        {
                            Id = new Guid("e1dff12d-6255-46fb-a0e8-3580dc1c70a8"),
                            CategoryId = new Guid("1c275fd6-53c1-4521-8d9a-501a1e57b872"),
                            CreatedAt = new DateTime(2024, 11, 17, 22, 34, 32, 471, DateTimeKind.Utc).AddTicks(5750),
                            Name = "Would you rather have a cat with a human face or a dog with human hands?",
                            UpdatedAt = new DateTime(2024, 11, 17, 22, 34, 32, 471, DateTimeKind.Utc).AddTicks(5750)
                        },
                        new
                        {
                            Id = new Guid("a37b78d3-e34f-45f4-8b7f-36b1dcc8c131"),
                            CategoryId = new Guid("1c275fd6-53c1-4521-8d9a-501a1e57b872"),
                            CreatedAt = new DateTime(2024, 11, 17, 22, 34, 32, 471, DateTimeKind.Utc).AddTicks(5760),
                            Name = "Would you rather have a boyfriend who’s stinking rich and ugly? Or a friend who’s dirt poor and handsome?",
                            UpdatedAt = new DateTime(2024, 11, 17, 22, 34, 32, 471, DateTimeKind.Utc).AddTicks(5760)
                        },
                        new
                        {
                            Id = new Guid("d1ab3bbc-538f-4462-9903-ea3df011e31c"),
                            CategoryId = new Guid("1c275fd6-53c1-4521-8d9a-501a1e57b872"),
                            CreatedAt = new DateTime(2024, 11, 17, 22, 34, 32, 471, DateTimeKind.Utc).AddTicks(5760),
                            Name = "Would you rather have hiccups for the rest of your life or constantly feel like you have to sneeze?",
                            UpdatedAt = new DateTime(2024, 11, 17, 22, 34, 32, 471, DateTimeKind.Utc).AddTicks(5760)
                        },
                        new
                        {
                            Id = new Guid("94c34a14-37cb-43b8-a20b-44ae8dc782f1"),
                            CategoryId = new Guid("1c275fd6-53c1-4521-8d9a-501a1e57b872"),
                            CreatedAt = new DateTime(2024, 11, 17, 22, 34, 32, 471, DateTimeKind.Utc).AddTicks(5770),
                            Name = "Would you rather fight young Mike Tyson once or talk like Mike Tyson for the rest of your life?",
                            UpdatedAt = new DateTime(2024, 11, 17, 22, 34, 32, 471, DateTimeKind.Utc).AddTicks(5770)
                        },
                        new
                        {
                            Id = new Guid("30897864-329a-4b31-9734-24431b09a1c9"),
                            CategoryId = new Guid("1c275fd6-53c1-4521-8d9a-501a1e57b872"),
                            CreatedAt = new DateTime(2024, 11, 17, 22, 34, 32, 471, DateTimeKind.Utc).AddTicks(5780),
                            Name = "Would you rather be surrounded by people who brag all the time or by people who constantly complain?",
                            UpdatedAt = new DateTime(2024, 11, 17, 22, 34, 32, 471, DateTimeKind.Utc).AddTicks(5780)
                        },
                        new
                        {
                            Id = new Guid("f13bd981-833d-4e7e-b860-89acb2286909"),
                            CategoryId = new Guid("1c275fd6-53c1-4521-8d9a-501a1e57b872"),
                            CreatedAt = new DateTime(2024, 11, 17, 22, 34, 32, 471, DateTimeKind.Utc).AddTicks(5780),
                            Name = "Would you rather speak every language fluently or play every instrument perfectly?",
                            UpdatedAt = new DateTime(2024, 11, 17, 22, 34, 32, 471, DateTimeKind.Utc).AddTicks(5780)
                        },
                        new
                        {
                            Id = new Guid("a4139abd-418a-4c37-8b9e-df10bfe6efe7"),
                            CategoryId = new Guid("1c275fd6-53c1-4521-8d9a-501a1e57b872"),
                            CreatedAt = new DateTime(2024, 11, 17, 22, 34, 32, 471, DateTimeKind.Utc).AddTicks(5790),
                            Name = "Would you rather Win $50,000 or let your best friend win $500,000?",
                            UpdatedAt = new DateTime(2024, 11, 17, 22, 34, 32, 471, DateTimeKind.Utc).AddTicks(5790)
                        },
                        new
                        {
                            Id = new Guid("09ebc59b-afd8-4d26-8754-fde26891aa79"),
                            CategoryId = new Guid("1c275fd6-53c1-4521-8d9a-501a1e57b872"),
                            CreatedAt = new DateTime(2024, 11, 17, 22, 34, 32, 471, DateTimeKind.Utc).AddTicks(5800),
                            Name = "Would you rather be stung by a thousand bees or stomp a kitten?",
                            UpdatedAt = new DateTime(2024, 11, 17, 22, 34, 32, 471, DateTimeKind.Utc).AddTicks(5800)
                        },
                        new
                        {
                            Id = new Guid("c616a239-c55a-42fa-b0ed-964be5fbcb21"),
                            CategoryId = new Guid("1c275fd6-53c1-4521-8d9a-501a1e57b872"),
                            CreatedAt = new DateTime(2024, 11, 17, 22, 34, 32, 471, DateTimeKind.Utc).AddTicks(5800),
                            Name = "Would you rather be with the person you love forever, but also wear a shirt made out of their pubes, or be alone for the rest of your life but wear whatever you want?",
                            UpdatedAt = new DateTime(2024, 11, 17, 22, 34, 32, 471, DateTimeKind.Utc).AddTicks(5800)
                        },
                        new
                        {
                            Id = new Guid("92ed913a-d93e-47cc-be7b-b2186aa44af5"),
                            CategoryId = new Guid("1c275fd6-53c1-4521-8d9a-501a1e57b872"),
                            CreatedAt = new DateTime(2024, 11, 17, 22, 34, 32, 471, DateTimeKind.Utc).AddTicks(5810),
                            Name = "Your dad and boyfriend switch bodies (Freaky Friday style). The only way to switch them back is to have sex with them, lights on and sober. Who do you pick?",
                            UpdatedAt = new DateTime(2024, 11, 17, 22, 34, 32, 471, DateTimeKind.Utc).AddTicks(5810)
                        },
                        new
                        {
                            Id = new Guid("dd3afa44-c7c4-4553-bf9f-8d596b26254b"),
                            CategoryId = new Guid("02ecd7c1-d98c-4b87-9577-a3ba9268913b"),
                            CreatedAt = new DateTime(2024, 11, 17, 22, 34, 32, 471, DateTimeKind.Utc).AddTicks(5820),
                            Name = "Name three things that you can do to get out of a funk.",
                            UpdatedAt = new DateTime(2024, 11, 17, 22, 34, 32, 471, DateTimeKind.Utc).AddTicks(5820)
                        },
                        new
                        {
                            Id = new Guid("ab174561-0f43-493a-ab79-8be1fc7465e8"),
                            CategoryId = new Guid("02ecd7c1-d98c-4b87-9577-a3ba9268913b"),
                            CreatedAt = new DateTime(2024, 11, 17, 22, 34, 32, 471, DateTimeKind.Utc).AddTicks(5820),
                            Name = "What’s a recent book you read or movie you saw that taught you something?",
                            UpdatedAt = new DateTime(2024, 11, 17, 22, 34, 32, 471, DateTimeKind.Utc).AddTicks(5820)
                        },
                        new
                        {
                            Id = new Guid("5d8baeed-c97c-4ee8-838a-92a1e9c35b57"),
                            CategoryId = new Guid("02ecd7c1-d98c-4b87-9577-a3ba9268913b"),
                            CreatedAt = new DateTime(2024, 11, 17, 22, 34, 32, 471, DateTimeKind.Utc).AddTicks(5830),
                            Name = "Would you rather travel to the past or the future?",
                            UpdatedAt = new DateTime(2024, 11, 17, 22, 34, 32, 471, DateTimeKind.Utc).AddTicks(5830)
                        },
                        new
                        {
                            Id = new Guid("b04a27a6-c780-4490-aaa4-3d3a5c48b902"),
                            CategoryId = new Guid("02ecd7c1-d98c-4b87-9577-a3ba9268913b"),
                            CreatedAt = new DateTime(2024, 11, 17, 22, 34, 32, 471, DateTimeKind.Utc).AddTicks(5840),
                            Name = "If you could travel the universe on the condition that you were never allowed to set foot on earth again, would you go?",
                            UpdatedAt = new DateTime(2024, 11, 17, 22, 34, 32, 471, DateTimeKind.Utc).AddTicks(5840)
                        },
                        new
                        {
                            Id = new Guid("2e2ee7a5-d820-4cdb-80b1-e3fede9315e0"),
                            CategoryId = new Guid("02ecd7c1-d98c-4b87-9577-a3ba9268913b"),
                            CreatedAt = new DateTime(2024, 11, 17, 22, 34, 32, 471, DateTimeKind.Utc).AddTicks(5840),
                            Name = "If you could make one decision to change the world, what would you do?",
                            UpdatedAt = new DateTime(2024, 11, 17, 22, 34, 32, 471, DateTimeKind.Utc).AddTicks(5840)
                        },
                        new
                        {
                            Id = new Guid("cdda0fe1-8261-493d-bb63-1c40b47ecba5"),
                            CategoryId = new Guid("02ecd7c1-d98c-4b87-9577-a3ba9268913b"),
                            CreatedAt = new DateTime(2024, 11, 17, 22, 34, 32, 471, DateTimeKind.Utc).AddTicks(5850),
                            Name = "What’s the first thing you do when you get back home from work?",
                            UpdatedAt = new DateTime(2024, 11, 17, 22, 34, 32, 471, DateTimeKind.Utc).AddTicks(5850)
                        },
                        new
                        {
                            Id = new Guid("ba46b3bb-15a9-4f53-9b6c-7825b34da75e"),
                            CategoryId = new Guid("02ecd7c1-d98c-4b87-9577-a3ba9268913b"),
                            CreatedAt = new DateTime(2024, 11, 17, 22, 34, 32, 471, DateTimeKind.Utc).AddTicks(5850),
                            Name = "If you could ask your pet 3 questions, what would they be?",
                            UpdatedAt = new DateTime(2024, 11, 17, 22, 34, 32, 471, DateTimeKind.Utc).AddTicks(5860)
                        },
                        new
                        {
                            Id = new Guid("cfd1e62b-1b8b-4737-b440-4adaf0490169"),
                            CategoryId = new Guid("02ecd7c1-d98c-4b87-9577-a3ba9268913b"),
                            CreatedAt = new DateTime(2024, 11, 17, 22, 34, 32, 471, DateTimeKind.Utc).AddTicks(5860),
                            Name = "What’s something you’d like to be remembered for?",
                            UpdatedAt = new DateTime(2024, 11, 17, 22, 34, 32, 471, DateTimeKind.Utc).AddTicks(5860)
                        },
                        new
                        {
                            Id = new Guid("70ba2d93-3e2e-4bd0-b8e2-bcf519958a17"),
                            CategoryId = new Guid("02ecd7c1-d98c-4b87-9577-a3ba9268913b"),
                            CreatedAt = new DateTime(2024, 11, 17, 22, 34, 32, 471, DateTimeKind.Utc).AddTicks(5870),
                            Name = "Is there a way you could fall head over heels for a man? What would that look like?",
                            UpdatedAt = new DateTime(2024, 11, 17, 22, 34, 32, 471, DateTimeKind.Utc).AddTicks(5870)
                        },
                        new
                        {
                            Id = new Guid("6abb0974-9ef4-4b81-9fe0-91ea86214709"),
                            CategoryId = new Guid("02ecd7c1-d98c-4b87-9577-a3ba9268913b"),
                            CreatedAt = new DateTime(2024, 11, 17, 22, 34, 32, 471, DateTimeKind.Utc).AddTicks(5870),
                            Name = "What’s the most romantic thing you’ve ever done for someone?",
                            UpdatedAt = new DateTime(2024, 11, 17, 22, 34, 32, 471, DateTimeKind.Utc).AddTicks(5870)
                        },
                        new
                        {
                            Id = new Guid("f9b037c0-29fb-434d-a658-03f552a11ca5"),
                            CategoryId = new Guid("02ecd7c1-d98c-4b87-9577-a3ba9268913b"),
                            CreatedAt = new DateTime(2024, 11, 17, 22, 34, 32, 471, DateTimeKind.Utc).AddTicks(5880),
                            Name = "If you were the mayor of your city, what rule would you instantly enforce?",
                            UpdatedAt = new DateTime(2024, 11, 17, 22, 34, 32, 471, DateTimeKind.Utc).AddTicks(5880)
                        },
                        new
                        {
                            Id = new Guid("3d861057-2ebe-4bc7-80b4-a45818de8b7a"),
                            CategoryId = new Guid("02ecd7c1-d98c-4b87-9577-a3ba9268913b"),
                            CreatedAt = new DateTime(2024, 11, 17, 22, 34, 32, 471, DateTimeKind.Utc).AddTicks(5890),
                            Name = "What’s your favorite and least favorite household chore?",
                            UpdatedAt = new DateTime(2024, 11, 17, 22, 34, 32, 471, DateTimeKind.Utc).AddTicks(5890)
                        },
                        new
                        {
                            Id = new Guid("fc94d573-4127-4972-9061-a1018de510e2"),
                            CategoryId = new Guid("02ecd7c1-d98c-4b87-9577-a3ba9268913b"),
                            CreatedAt = new DateTime(2024, 11, 17, 22, 34, 32, 471, DateTimeKind.Utc).AddTicks(5890),
                            Name = "What’s one responsibility of yours that you’d prefer to delegate to a professional?",
                            UpdatedAt = new DateTime(2024, 11, 17, 22, 34, 32, 471, DateTimeKind.Utc).AddTicks(5890)
                        },
                        new
                        {
                            Id = new Guid("d04bb78d-f8a0-4577-98a3-bc700472d266"),
                            CategoryId = new Guid("02ecd7c1-d98c-4b87-9577-a3ba9268913b"),
                            CreatedAt = new DateTime(2024, 11, 17, 22, 34, 32, 471, DateTimeKind.Utc).AddTicks(5900),
                            Name = "What’s something you’ve always wanted to do, but haven’t?",
                            UpdatedAt = new DateTime(2024, 11, 17, 22, 34, 32, 471, DateTimeKind.Utc).AddTicks(5900)
                        },
                        new
                        {
                            Id = new Guid("46b1d1f3-c52c-4830-8af4-cbbefbd908e3"),
                            CategoryId = new Guid("02ecd7c1-d98c-4b87-9577-a3ba9268913b"),
                            CreatedAt = new DateTime(2024, 11, 17, 22, 34, 32, 471, DateTimeKind.Utc).AddTicks(5910),
                            Name = "Would you continue working if you were rich and didn’t need to?",
                            UpdatedAt = new DateTime(2024, 11, 17, 22, 34, 32, 471, DateTimeKind.Utc).AddTicks(5910)
                        },
                        new
                        {
                            Id = new Guid("b1f0014a-eed1-4de4-8454-c5844d5ed2f8"),
                            CategoryId = new Guid("02ecd7c1-d98c-4b87-9577-a3ba9268913b"),
                            CreatedAt = new DateTime(2024, 11, 17, 22, 34, 32, 471, DateTimeKind.Utc).AddTicks(5910),
                            Name = "What does your ideal night look like? Do you go out or are you at home with friends?",
                            UpdatedAt = new DateTime(2024, 11, 17, 22, 34, 32, 471, DateTimeKind.Utc).AddTicks(5910)
                        },
                        new
                        {
                            Id = new Guid("a604f987-ca3f-4a46-948e-ad79e071594c"),
                            CategoryId = new Guid("02ecd7c1-d98c-4b87-9577-a3ba9268913b"),
                            CreatedAt = new DateTime(2024, 11, 17, 22, 34, 32, 471, DateTimeKind.Utc).AddTicks(5920),
                            Name = "If you could change one thing about the way you were raised, what would that be?",
                            UpdatedAt = new DateTime(2024, 11, 17, 22, 34, 32, 471, DateTimeKind.Utc).AddTicks(5920)
                        },
                        new
                        {
                            Id = new Guid("5b1b1cfa-68aa-4dac-9158-83cc09614fbd"),
                            CategoryId = new Guid("02ecd7c1-d98c-4b87-9577-a3ba9268913b"),
                            CreatedAt = new DateTime(2024, 11, 17, 22, 34, 32, 471, DateTimeKind.Utc).AddTicks(5930),
                            Name = "What’s something that gives your life meaning?",
                            UpdatedAt = new DateTime(2024, 11, 17, 22, 34, 32, 471, DateTimeKind.Utc).AddTicks(5930)
                        },
                        new
                        {
                            Id = new Guid("749ba5de-0cf0-407f-8330-0cbcd99a6a9f"),
                            CategoryId = new Guid("02ecd7c1-d98c-4b87-9577-a3ba9268913b"),
                            CreatedAt = new DateTime(2024, 11, 17, 22, 34, 32, 471, DateTimeKind.Utc).AddTicks(5930),
                            Name = "What dating advice would you give your younger self?",
                            UpdatedAt = new DateTime(2024, 11, 17, 22, 34, 32, 471, DateTimeKind.Utc).AddTicks(5930)
                        },
                        new
                        {
                            Id = new Guid("d76225a8-f791-4780-82f6-08d68d9448d3"),
                            CategoryId = new Guid("02ecd7c1-d98c-4b87-9577-a3ba9268913b"),
                            CreatedAt = new DateTime(2024, 11, 17, 22, 34, 32, 471, DateTimeKind.Utc).AddTicks(5940),
                            Name = "What song would you want to play on your wedding day?",
                            UpdatedAt = new DateTime(2024, 11, 17, 22, 34, 32, 471, DateTimeKind.Utc).AddTicks(5940)
                        },
                        new
                        {
                            Id = new Guid("be7aa718-99f0-4ffb-8f82-bab82383135b"),
                            CategoryId = new Guid("02ecd7c1-d98c-4b87-9577-a3ba9268913b"),
                            CreatedAt = new DateTime(2024, 11, 17, 22, 34, 32, 471, DateTimeKind.Utc).AddTicks(5950),
                            Name = "What would you like to get for your birthday?",
                            UpdatedAt = new DateTime(2024, 11, 17, 22, 34, 32, 471, DateTimeKind.Utc).AddTicks(5950)
                        },
                        new
                        {
                            Id = new Guid("89fd183b-2f5c-4f30-916e-b981b0e0ca8b"),
                            CategoryId = new Guid("02ecd7c1-d98c-4b87-9577-a3ba9268913b"),
                            CreatedAt = new DateTime(2024, 11, 17, 22, 34, 32, 471, DateTimeKind.Utc).AddTicks(5950),
                            Name = "If you could only put on one piece of makeup, what would it be?",
                            UpdatedAt = new DateTime(2024, 11, 17, 22, 34, 32, 471, DateTimeKind.Utc).AddTicks(5950)
                        },
                        new
                        {
                            Id = new Guid("a54a501d-1f45-43bd-9dcb-e981f282c0e5"),
                            CategoryId = new Guid("02ecd7c1-d98c-4b87-9577-a3ba9268913b"),
                            CreatedAt = new DateTime(2024, 11, 17, 22, 34, 32, 471, DateTimeKind.Utc).AddTicks(5960),
                            Name = "What’s the one compliment you get the most?",
                            UpdatedAt = new DateTime(2024, 11, 17, 22, 34, 32, 471, DateTimeKind.Utc).AddTicks(5960)
                        },
                        new
                        {
                            Id = new Guid("fd46e021-6190-4938-819c-b3cbad7880be"),
                            CategoryId = new Guid("02ecd7c1-d98c-4b87-9577-a3ba9268913b"),
                            CreatedAt = new DateTime(2024, 11, 17, 22, 34, 32, 471, DateTimeKind.Utc).AddTicks(5960),
                            Name = "Where do you feel the most at home?",
                            UpdatedAt = new DateTime(2024, 11, 17, 22, 34, 32, 471, DateTimeKind.Utc).AddTicks(5970)
                        },
                        new
                        {
                            Id = new Guid("6b25e225-2219-4ea1-9d29-0d181e5c3800"),
                            CategoryId = new Guid("02ecd7c1-d98c-4b87-9577-a3ba9268913b"),
                            CreatedAt = new DateTime(2024, 11, 17, 22, 34, 32, 471, DateTimeKind.Utc).AddTicks(5970),
                            Name = "What do you wish you cared less about?",
                            UpdatedAt = new DateTime(2024, 11, 17, 22, 34, 32, 471, DateTimeKind.Utc).AddTicks(5970)
                        },
                        new
                        {
                            Id = new Guid("767ab92d-8117-477a-bfd1-576efc3380d8"),
                            CategoryId = new Guid("02ecd7c1-d98c-4b87-9577-a3ba9268913b"),
                            CreatedAt = new DateTime(2024, 11, 17, 22, 34, 32, 471, DateTimeKind.Utc).AddTicks(5980),
                            Name = "What do your friends and family call you?",
                            UpdatedAt = new DateTime(2024, 11, 17, 22, 34, 32, 471, DateTimeKind.Utc).AddTicks(5980)
                        },
                        new
                        {
                            Id = new Guid("26af3051-c5e3-4be6-86dc-f3db62ff1596"),
                            CategoryId = new Guid("02ecd7c1-d98c-4b87-9577-a3ba9268913b"),
                            CreatedAt = new DateTime(2024, 11, 17, 22, 34, 32, 471, DateTimeKind.Utc).AddTicks(5980),
                            Name = "Where do you go if you want to escape?",
                            UpdatedAt = new DateTime(2024, 11, 17, 22, 34, 32, 471, DateTimeKind.Utc).AddTicks(5990)
                        },
                        new
                        {
                            Id = new Guid("18f33003-f0ab-4fcf-8504-4388422a5960"),
                            CategoryId = new Guid("02ecd7c1-d98c-4b87-9577-a3ba9268913b"),
                            CreatedAt = new DateTime(2024, 11, 17, 22, 34, 32, 471, DateTimeKind.Utc).AddTicks(5990),
                            Name = "What’s something you swear by?",
                            UpdatedAt = new DateTime(2024, 11, 17, 22, 34, 32, 471, DateTimeKind.Utc).AddTicks(5990)
                        },
                        new
                        {
                            Id = new Guid("068410e4-017b-4a7f-93e9-adaec48a8e97"),
                            CategoryId = new Guid("02ecd7c1-d98c-4b87-9577-a3ba9268913b"),
                            CreatedAt = new DateTime(2024, 11, 17, 22, 34, 32, 471, DateTimeKind.Utc).AddTicks(6000),
                            Name = "What’s the most important thing your life is missing?",
                            UpdatedAt = new DateTime(2024, 11, 17, 22, 34, 32, 471, DateTimeKind.Utc).AddTicks(6000)
                        },
                        new
                        {
                            Id = new Guid("8702c46f-dd37-4ce5-821d-e1d400a6d916"),
                            CategoryId = new Guid("02ecd7c1-d98c-4b87-9577-a3ba9268913b"),
                            CreatedAt = new DateTime(2024, 11, 17, 22, 34, 32, 471, DateTimeKind.Utc).AddTicks(6000),
                            Name = "What do you wish more people knew about you?",
                            UpdatedAt = new DateTime(2024, 11, 17, 22, 34, 32, 471, DateTimeKind.Utc).AddTicks(6000)
                        },
                        new
                        {
                            Id = new Guid("853a5bd1-7152-4fc8-a858-302134325962"),
                            CategoryId = new Guid("02ecd7c1-d98c-4b87-9577-a3ba9268913b"),
                            CreatedAt = new DateTime(2024, 11, 17, 22, 34, 32, 471, DateTimeKind.Utc).AddTicks(6010),
                            Name = "How long ago did you tell someone you loved them?",
                            UpdatedAt = new DateTime(2024, 11, 17, 22, 34, 32, 471, DateTimeKind.Utc).AddTicks(6010)
                        },
                        new
                        {
                            Id = new Guid("7b16abbd-1d06-46c2-9638-709c34817d01"),
                            CategoryId = new Guid("f9d7cd77-d00f-4f90-ae3c-031b58519c07"),
                            CreatedAt = new DateTime(2024, 11, 17, 22, 34, 32, 471, DateTimeKind.Utc).AddTicks(6020),
                            Name = "Flight or invisibility?",
                            UpdatedAt = new DateTime(2024, 11, 17, 22, 34, 32, 471, DateTimeKind.Utc).AddTicks(6020)
                        },
                        new
                        {
                            Id = new Guid("010ad1dd-e62e-42e0-8897-9079192a2eae"),
                            CategoryId = new Guid("f9d7cd77-d00f-4f90-ae3c-031b58519c07"),
                            CreatedAt = new DateTime(2024, 11, 17, 22, 34, 32, 471, DateTimeKind.Utc).AddTicks(6020),
                            Name = "Peanut butter or Nutella?",
                            UpdatedAt = new DateTime(2024, 11, 17, 22, 34, 32, 471, DateTimeKind.Utc).AddTicks(6020)
                        },
                        new
                        {
                            Id = new Guid("e332b4ea-55cb-4535-84a4-9ee656dddcf5"),
                            CategoryId = new Guid("f9d7cd77-d00f-4f90-ae3c-031b58519c07"),
                            CreatedAt = new DateTime(2024, 11, 17, 22, 34, 32, 471, DateTimeKind.Utc).AddTicks(6030),
                            Name = "Quit coffee or never have snacks during films and series?",
                            UpdatedAt = new DateTime(2024, 11, 17, 22, 34, 32, 471, DateTimeKind.Utc).AddTicks(6030)
                        },
                        new
                        {
                            Id = new Guid("22eb7d19-724a-41ff-80e3-2664a1637e6e"),
                            CategoryId = new Guid("f9d7cd77-d00f-4f90-ae3c-031b58519c07"),
                            CreatedAt = new DateTime(2024, 11, 17, 22, 34, 32, 471, DateTimeKind.Utc).AddTicks(6040),
                            Name = "Bath or shower?",
                            UpdatedAt = new DateTime(2024, 11, 17, 22, 34, 32, 471, DateTimeKind.Utc).AddTicks(6040)
                        },
                        new
                        {
                            Id = new Guid("57ae497a-42cb-4ab2-954d-7e1d6530657b"),
                            CategoryId = new Guid("f9d7cd77-d00f-4f90-ae3c-031b58519c07"),
                            CreatedAt = new DateTime(2024, 11, 17, 22, 34, 32, 471, DateTimeKind.Utc).AddTicks(6040),
                            Name = "Love or money?",
                            UpdatedAt = new DateTime(2024, 11, 17, 22, 34, 32, 471, DateTimeKind.Utc).AddTicks(6040)
                        },
                        new
                        {
                            Id = new Guid("3af295e8-f104-49c9-9aa6-e86653b3edf3"),
                            CategoryId = new Guid("f9d7cd77-d00f-4f90-ae3c-031b58519c07"),
                            CreatedAt = new DateTime(2024, 11, 17, 22, 34, 32, 471, DateTimeKind.Utc).AddTicks(6050),
                            Name = "Burger or pizza?",
                            UpdatedAt = new DateTime(2024, 11, 17, 22, 34, 32, 471, DateTimeKind.Utc).AddTicks(6050)
                        },
                        new
                        {
                            Id = new Guid("2caac5fd-2ae2-4b3c-98ff-83dc2fc4245a"),
                            CategoryId = new Guid("f9d7cd77-d00f-4f90-ae3c-031b58519c07"),
                            CreatedAt = new DateTime(2024, 11, 17, 22, 34, 32, 471, DateTimeKind.Utc).AddTicks(6060),
                            Name = "Dine-in or delivery?",
                            UpdatedAt = new DateTime(2024, 11, 17, 22, 34, 32, 471, DateTimeKind.Utc).AddTicks(6060)
                        });
                });

            modelBuilder.Entity("api.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("VARCHAR(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("VARCHAR(50)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("api.Models.UserProfile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int?>("AgeFilterMax")
                        .HasColumnType("integer");

                    b.Property<int?>("AgeFilterMin")
                        .HasColumnType("integer");

                    b.Property<string>("Bio")
                        .HasColumnType("VARCHAR(255)");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("DistanceFilter")
                        .HasColumnType("integer");

                    b.Property<bool>("Hidden")
                        .HasColumnType("boolean");

                    b.Property<string>("Job")
                        .HasColumnType("text");

                    b.Property<JsonDocument>("Location")
                        .HasColumnType("jsonb");

                    b.Property<string>("School")
                        .HasColumnType("text");

                    b.Property<JsonDocument>("SelectedDescriptors")
                        .HasColumnType("jsonb");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<Point>("pos")
                        .HasColumnType("geometry (point)");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("UserProfiles");
                });

            modelBuilder.Entity("api.Models.UserProfileGender", b =>
                {
                    b.Property<Guid>("UserProfileId")
                        .HasColumnType("uuid")
                        .HasColumnOrder(1);

                    b.Property<Guid>("GenderId")
                        .HasColumnType("uuid")
                        .HasColumnOrder(2);

                    b.Property<bool?>("isMain")
                        .HasColumnType("boolean");

                    b.HasKey("UserProfileId", "GenderId");

                    b.HasIndex("GenderId");

                    b.ToTable("UserProfileGenders");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("api.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("api.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("api.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("api.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("api.Models.BlockedUser", b =>
                {
                    b.HasOne("api.Models.User", "Blocked")
                        .WithMany()
                        .HasForeignKey("BlockedUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("api.Models.User", "Blocker")
                        .WithMany()
                        .HasForeignKey("BlockerUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Blocked");

                    b.Navigation("Blocker");
                });

            modelBuilder.Entity("api.Models.Gender", b =>
                {
                    b.HasOne("api.Models.Gender", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("api.Models.HiddenRoom", b =>
                {
                    b.HasOne("api.Models.Room", "Room")
                        .WithMany()
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("api.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Room");

                    b.Navigation("User");
                });

            modelBuilder.Entity("api.Models.Match", b =>
                {
                    b.HasOne("api.Models.User", "User1")
                        .WithMany("MatchesAsUser1")
                        .HasForeignKey("User1Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("api.Models.User", "User2")
                        .WithMany("MatchesAsUser2")
                        .HasForeignKey("User2Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User1");

                    b.Navigation("User2");
                });

            modelBuilder.Entity("api.Models.Media", b =>
                {
                    b.HasOne("api.Models.User", "User")
                        .WithMany("Media")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("api.Models.Message", b =>
                {
                    b.HasOne("api.Models.User", "Receiver")
                        .WithMany()
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("api.Models.User", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Receiver");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("api.Models.Room", b =>
                {
                    b.HasOne("api.Models.User", "User")
                        .WithMany("Rooms")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("api.Models.RoomParticipant", b =>
                {
                    b.HasOne("api.Models.Room", "Room")
                        .WithMany("RoomParticipants")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("api.Models.User", "User")
                        .WithMany("RoomParticipants")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Room");

                    b.Navigation("User");
                });

            modelBuilder.Entity("api.Models.RoomParticipantEvent", b =>
                {
                    b.HasOne("api.Models.RoomParticipant", "RoomParticipant")
                        .WithMany("RoomParticipantEvents")
                        .HasForeignKey("RoomParticipantId");

                    b.Navigation("RoomParticipant");
                });

            modelBuilder.Entity("api.Models.SystemQuestion", b =>
                {
                    b.HasOne("api.Models.QuestionCategory", "Category")
                        .WithMany("SystemQuestions")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("api.Models.UserProfile", b =>
                {
                    b.HasOne("api.Models.User", "User")
                        .WithOne("UserProfile")
                        .HasForeignKey("api.Models.UserProfile", "UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("api.Models.UserProfileGender", b =>
                {
                    b.HasOne("api.Models.Gender", "Gender")
                        .WithMany("UserProfileGenders")
                        .HasForeignKey("GenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("api.Models.UserProfile", "UserProfile")
                        .WithMany("UserProfileGenders")
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Gender");

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("api.Models.Gender", b =>
                {
                    b.Navigation("Children");

                    b.Navigation("UserProfileGenders");
                });

            modelBuilder.Entity("api.Models.QuestionCategory", b =>
                {
                    b.Navigation("SystemQuestions");
                });

            modelBuilder.Entity("api.Models.Room", b =>
                {
                    b.Navigation("RoomParticipants");
                });

            modelBuilder.Entity("api.Models.RoomParticipant", b =>
                {
                    b.Navigation("RoomParticipantEvents");
                });

            modelBuilder.Entity("api.Models.User", b =>
                {
                    b.Navigation("MatchesAsUser1");

                    b.Navigation("MatchesAsUser2");

                    b.Navigation("Media");

                    b.Navigation("RoomParticipants");

                    b.Navigation("Rooms");

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("api.Models.UserProfile", b =>
                {
                    b.Navigation("UserProfileGenders");
                });
#pragma warning restore 612, 618
        }
    }
}
