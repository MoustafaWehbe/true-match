/* tslint:disable */
/* eslint-disable */
/**
 * Dapp Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ProblemDetails,
  QuestionCategory,
  QuestionCategoryDto,
} from '../models/index';
import {
    ProblemDetailsFromJSON,
    ProblemDetailsToJSON,
    QuestionCategoryFromJSON,
    QuestionCategoryToJSON,
    QuestionCategoryDtoFromJSON,
    QuestionCategoryDtoToJSON,
} from '../models/index';

export interface ApiQuestionCategoryIdDeleteRequest {
    id: number;
}

export interface ApiQuestionCategoryIdGetRequest {
    id: number;
}

export interface ApiQuestionCategoryIdPutRequest {
    id: number;
    questionCategoryDto?: QuestionCategoryDto;
}

export interface ApiQuestionCategoryPostRequest {
    questionCategoryDto?: QuestionCategoryDto;
}

/**
 * 
 */
export class QuestionCategoriesApi extends runtime.BaseAPI {

    /**
     */
    async apiQuestionCategoryGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<QuestionCategory>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/question-category`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(QuestionCategoryFromJSON));
    }

    /**
     */
    async apiQuestionCategoryGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<QuestionCategory>> {
        const response = await this.apiQuestionCategoryGetRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async apiQuestionCategoryIdDeleteRaw(requestParameters: ApiQuestionCategoryIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiQuestionCategoryIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/question-category/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiQuestionCategoryIdDelete(requestParameters: ApiQuestionCategoryIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiQuestionCategoryIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     */
    async apiQuestionCategoryIdGetRaw(requestParameters: ApiQuestionCategoryIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<QuestionCategory>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiQuestionCategoryIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/question-category/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => QuestionCategoryFromJSON(jsonValue));
    }

    /**
     */
    async apiQuestionCategoryIdGet(requestParameters: ApiQuestionCategoryIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<QuestionCategory> {
        const response = await this.apiQuestionCategoryIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiQuestionCategoryIdPutRaw(requestParameters: ApiQuestionCategoryIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiQuestionCategoryIdPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/question-category/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: QuestionCategoryDtoToJSON(requestParameters['questionCategoryDto']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiQuestionCategoryIdPut(requestParameters: ApiQuestionCategoryIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiQuestionCategoryIdPutRaw(requestParameters, initOverrides);
    }

    /**
     */
    async apiQuestionCategoryPostRaw(requestParameters: ApiQuestionCategoryPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<QuestionCategory>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/question-category`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: QuestionCategoryDtoToJSON(requestParameters['questionCategoryDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => QuestionCategoryFromJSON(jsonValue));
    }

    /**
     */
    async apiQuestionCategoryPost(requestParameters: ApiQuestionCategoryPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<QuestionCategory> {
        const response = await this.apiQuestionCategoryPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
