/* tslint:disable */
/* eslint-disable */
/**
 * Dapp Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateSystemQuestionDto,
  ProblemDetails,
  SystemQuestion,
  UpdateSystemQuestionDto,
} from '../models/index';
import {
    CreateSystemQuestionDtoFromJSON,
    CreateSystemQuestionDtoToJSON,
    ProblemDetailsFromJSON,
    ProblemDetailsToJSON,
    SystemQuestionFromJSON,
    SystemQuestionToJSON,
    UpdateSystemQuestionDtoFromJSON,
    UpdateSystemQuestionDtoToJSON,
} from '../models/index';

export interface ApiSystemQuestionsIdDeleteRequest {
    id: number;
}

export interface ApiSystemQuestionsIdGetRequest {
    id: number;
}

export interface ApiSystemQuestionsIdPutRequest {
    id: number;
    updateSystemQuestionDto?: UpdateSystemQuestionDto;
}

export interface ApiSystemQuestionsPostRequest {
    createSystemQuestionDto?: CreateSystemQuestionDto;
}

/**
 * 
 */
export class SystemQuestionsApi extends runtime.BaseAPI {

    /**
     */
    async apiSystemQuestionsGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<SystemQuestion>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/SystemQuestions`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(SystemQuestionFromJSON));
    }

    /**
     */
    async apiSystemQuestionsGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<SystemQuestion>> {
        const response = await this.apiSystemQuestionsGetRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async apiSystemQuestionsIdDeleteRaw(requestParameters: ApiSystemQuestionsIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiSystemQuestionsIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/SystemQuestions/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiSystemQuestionsIdDelete(requestParameters: ApiSystemQuestionsIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiSystemQuestionsIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     */
    async apiSystemQuestionsIdGetRaw(requestParameters: ApiSystemQuestionsIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SystemQuestion>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiSystemQuestionsIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/SystemQuestions/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SystemQuestionFromJSON(jsonValue));
    }

    /**
     */
    async apiSystemQuestionsIdGet(requestParameters: ApiSystemQuestionsIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SystemQuestion> {
        const response = await this.apiSystemQuestionsIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiSystemQuestionsIdPutRaw(requestParameters: ApiSystemQuestionsIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiSystemQuestionsIdPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/SystemQuestions/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateSystemQuestionDtoToJSON(requestParameters['updateSystemQuestionDto']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiSystemQuestionsIdPut(requestParameters: ApiSystemQuestionsIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiSystemQuestionsIdPutRaw(requestParameters, initOverrides);
    }

    /**
     */
    async apiSystemQuestionsPostRaw(requestParameters: ApiSystemQuestionsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SystemQuestion>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/SystemQuestions`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateSystemQuestionDtoToJSON(requestParameters['createSystemQuestionDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SystemQuestionFromJSON(jsonValue));
    }

    /**
     */
    async apiSystemQuestionsPost(requestParameters: ApiSystemQuestionsPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SystemQuestion> {
        const response = await this.apiSystemQuestionsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
